
FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005874  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005a90  08005a90  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a90  08005a90  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000064  08005afc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08005afc  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130ab  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f61  00000000  00000000  0003317b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e63  00000000  00000000  00037340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b94c  00000000  00000000  000381a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018382  00000000  00000000  00053aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d312  00000000  00000000  0006be71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fd8  00000000  00000000  00109184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000064 	.word	0x20000064
 8000200:	00000000 	.word	0x00000000
 8000204:	08005a40 	.word	0x08005a40

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000068 	.word	0x20000068
 8000220:	08005a40 	.word	0x08005a40

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x48>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_DMA_Init+0x48>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x48>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	203a      	movs	r0, #58	; 0x3a
 8000704:	f001 fc8d 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000708:	203a      	movs	r0, #58	; 0x3a
 800070a:	f001 fca6 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	203b      	movs	r0, #59	; 0x3b
 8000714:	f001 fc85 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8000718:	203b      	movs	r0, #59	; 0x3b
 800071a:	f001 fc9e 	bl	800205a <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	4b42      	ldr	r3, [pc, #264]	; (800084c <MX_GPIO_Init+0x120>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a41      	ldr	r2, [pc, #260]	; (800084c <MX_GPIO_Init+0x120>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b3f      	ldr	r3, [pc, #252]	; (800084c <MX_GPIO_Init+0x120>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0320 	and.w	r3, r3, #32
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <MX_GPIO_Init+0x120>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a3b      	ldr	r2, [pc, #236]	; (800084c <MX_GPIO_Init+0x120>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_GPIO_Init+0x120>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_GPIO_Init+0x120>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a35      	ldr	r2, [pc, #212]	; (800084c <MX_GPIO_Init+0x120>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_GPIO_Init+0x120>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_GPIO_Init+0x120>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <MX_GPIO_Init+0x120>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0x120>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OE_Pin|SCLR_Pin|SEN_V_ENABLE_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2170      	movs	r1, #112	; 0x70
 80007a4:	482a      	ldr	r0, [pc, #168]	; (8000850 <MX_GPIO_Init+0x124>)
 80007a6:	f002 fa8b 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_MEASURING_Pin|LED_ERROR_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f241 4104 	movw	r1, #5124	; 0x1404
 80007b0:	4828      	ldr	r0, [pc, #160]	; (8000854 <MX_GPIO_Init+0x128>)
 80007b2:	f002 fa85 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCTS_Pin|NRTS_Pin|UART_RESET__Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7160 	mov.w	r1, #896	; 0x380
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <MX_GPIO_Init+0x124>)
 80007be:	f002 fa7f 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RI__GPIO_Port, RI__Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	4823      	ldr	r0, [pc, #140]	; (8000858 <MX_GPIO_Init+0x12c>)
 80007ca:	f002 fa79 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = OE_Pin|SCLR_Pin|SEN_V_ENABLE_Pin|NCTS_Pin
 80007ce:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80007d2:	613b      	str	r3, [r7, #16]
                          |NRTS_Pin|UART_RESET__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	481a      	ldr	r0, [pc, #104]	; (8000850 <MX_GPIO_Init+0x124>)
 80007e8:	f002 f8d6 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_MEASURING_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 80007ec:	f241 4304 	movw	r3, #5124	; 0x1404
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_GPIO_Init+0x128>)
 8000806:	f002 f8c7 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RI__Pin;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RI__GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_GPIO_Init+0x12c>)
 8000824:	f002 f8b8 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0x128>)
 800083e:	f002 f8ab 	bl	8002998 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	40011000 	.word	0x40011000
 8000854:	40010c00 	.word	0x40010c00
 8000858:	40010800 	.word	0x40010800

0800085c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C1_Init+0x50>)
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_I2C1_Init+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C1_Init+0x50>)
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x58>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_I2C1_Init+0x50>)
 800087a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_I2C1_Init+0x50>)
 800089a:	f002 fa43 	bl	8002d24 <HAL_I2C_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a4:	f000 f9ce 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000080 	.word	0x20000080
 80008b0:	40005400 	.word	0x40005400
 80008b4:	000186a0 	.word	0x000186a0

080008b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x70>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d123      	bne.n	8000920 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <HAL_I2C_MspInit+0x74>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <HAL_I2C_MspInit+0x74>)
 80008de:	f043 0308 	orr.w	r3, r3, #8
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_I2C_MspInit+0x74>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008f0:	23c0      	movs	r3, #192	; 0xc0
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <HAL_I2C_MspInit+0x78>)
 8000904:	f002 f848 	bl	8002998 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_I2C_MspInit+0x74>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_I2C_MspInit+0x74>)
 800090e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000912:	61d3      	str	r3, [r2, #28]
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_I2C_MspInit+0x74>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40005400 	.word	0x40005400
 800092c:	40021000 	.word	0x40021000
 8000930:	40010c00 	.word	0x40010c00

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b0bb      	sub	sp, #236	; 0xec
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f001 fa15 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f93b 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f7ff fef3 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000946:	f7ff fecb 	bl	80006e0 <MX_DMA_Init>
  MX_I2C1_Init();
 800094a:	f7ff ff87 	bl	800085c <MX_I2C1_Init>
  MX_UART4_Init();
 800094e:	f001 f87f 	bl	8001a50 <MX_UART4_Init>
  MX_UART5_Init();
 8000952:	f001 f8a7 	bl	8001aa4 <MX_UART5_Init>
  MX_SPI1_Init();
 8000956:	f000 fd15 	bl	8001384 <MX_SPI1_Init>
  MX_SPI2_Init();
 800095a:	f000 fd49 	bl	80013f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 800095e:	f000 ff27 	bl	80017b0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000962:	f000 ff71 	bl	8001848 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart4, &data_rec, 1);
 8000966:	2201      	movs	r2, #1
 8000968:	4986      	ldr	r1, [pc, #536]	; (8000b84 <main+0x250>)
 800096a:	4887      	ldr	r0, [pc, #540]	; (8000b88 <main+0x254>)
 800096c:	f004 f840 	bl	80049f0 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	uint8_t num_of_sensors = 8;
 8000970:	2308      	movs	r3, #8
 8000972:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	Sensor* sensors = (Sensor*) malloc(sizeof(Sensor) * num_of_sensors);
 8000976:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800097a:	2264      	movs	r2, #100	; 0x64
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f004 ff57 	bl	8005834 <malloc>
 8000986:	4603      	mov	r3, r0
 8000988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	MeasuredData faultSensor={
 800098c:	4a7f      	ldr	r2, [pc, #508]	; (8000b8c <main+0x258>)
 800098e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000992:	ca07      	ldmia	r2, {r0, r1, r2}
 8000994:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.y_B=87,
			.z_B=87
	};


	Message msg = {0};
 8000998:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800099c:	2260      	movs	r2, #96	; 0x60
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 fffb 	bl	800599c <memset>

	sensor_power_on();
 80009a6:	f000 fa77 	bl	8000e98 <sensor_power_on>
	HAL_Delay(250);
 80009aa:	20fa      	movs	r0, #250	; 0xfa
 80009ac:	f001 fa3e 	bl	8001e2c <HAL_Delay>

	deactivateSCLR();
 80009b0:	f000 fa7e 	bl	8000eb0 <deactivateSCLR>
	HAL_Delay(250);
 80009b4:	20fa      	movs	r0, #250	; 0xfa
 80009b6:	f001 fa39 	bl	8001e2c <HAL_Delay>

	for (int sen = 0; sen < (num_of_sensors); sen++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80009c0:	e031      	b.n	8000a26 <main+0xf2>
		if (sen == 3){
 80009c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d027      	beq.n	8000a1a <main+0xe6>
			continue;
		}

		sensors[sen] = sensor_init(sen + 1);
 80009ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	3301      	adds	r3, #1
 80009d2:	b2d9      	uxtb	r1, r3
 80009d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009d8:	2264      	movs	r2, #100	; 0x64
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80009e2:	18d4      	adds	r4, r2, r3
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f94a 	bl	8000c80 <sensor_init>
 80009ec:	4620      	mov	r0, r4
 80009ee:	463b      	mov	r3, r7
 80009f0:	2264      	movs	r2, #100	; 0x64
 80009f2:	4619      	mov	r1, r3
 80009f4:	f005 f816 	bl	8005a24 <memcpy>
		if (!(sensors[sen].ok)) {
 80009f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009fc:	2264      	movs	r2, #100	; 0x64
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000a06:	4413      	add	r3, r2
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d106      	bne.n	8000a1c <main+0xe8>
			while (1) {
				errorLED();
 8000a0e:	f000 fc27 	bl	8001260 <errorLED>
				HAL_Delay(200);
 8000a12:	20c8      	movs	r0, #200	; 0xc8
 8000a14:	f001 fa0a 	bl	8001e2c <HAL_Delay>
				errorLED();
 8000a18:	e7f9      	b.n	8000a0e <main+0xda>
			continue;
 8000a1a:	bf00      	nop
	for (int sen = 0; sen < (num_of_sensors); sen++) {
 8000a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000a20:	3301      	adds	r3, #1
 8000a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000a26:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dbc7      	blt.n	80009c2 <main+0x8e>
			}
		}
	}

	HAL_TIM_Base_Start_IT(&htim5);
 8000a32:	4857      	ldr	r0, [pc, #348]	; (8000b90 <main+0x25c>)
 8000a34:	f003 fb3a 	bl	80040ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000a38:	4856      	ldr	r0, [pc, #344]	; (8000b94 <main+0x260>)
 8000a3a:	f003 fb37 	bl	80040ac <HAL_TIM_Base_Start_IT>
	while (1) {

		if (min_tim > 0)
 8000a3e:	4b56      	ldr	r3, [pc, #344]	; (8000b98 <main+0x264>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0fb      	beq.n	8000a3e <main+0x10a>
		{
			read_time();
 8000a46:	f000 ff8d 	bl	8001964 <read_time>
			cnt++;
 8000a4a:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <main+0x268>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b52      	ldr	r3, [pc, #328]	; (8000b9c <main+0x268>)
 8000a54:	801a      	strh	r2, [r3, #0]
			if (cnt >= PERIOD)
 8000a56:	4b51      	ldr	r3, [pc, #324]	; (8000b9c <main+0x268>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	d958      	bls.n	8000b10 <main+0x1dc>
			{
				cnt = 0;
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <main+0x268>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	801a      	strh	r2, [r3, #0]
				if (measure)
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <main+0x26c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d051      	beq.n	8000b10 <main+0x1dc>
				{
					for (int sen = 0; sen < NUM_OF_SENSORS; sen++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000a72:	e039      	b.n	8000ae8 <main+0x1b4>
					{
						if(sen==3)
 8000a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d10f      	bne.n	8000a9c <main+0x168>
						{
							memcpy(&msg.data[sen],&faultSensor,sizeof(MeasuredData));
 8000a7c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000a80:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000a92:	220c      	movs	r2, #12
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 ffc5 	bl	8005a24 <memcpy>
							continue;
 8000a9a:	e020      	b.n	8000ade <main+0x1aa>
						}
						read_sensor_data(&(sensors[sen]));
 8000a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000aa0:	2264      	movs	r2, #100	; 0x64
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000aaa:	4413      	add	r3, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fbe5 	bl	800127c <read_sensor_data>
						memcpy(&msg.data[sen],&sensors[sen].measured_data,sizeof(MeasuredData));
 8000ab2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000ab6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	18c8      	adds	r0, r1, r3
 8000ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ac8:	2264      	movs	r2, #100	; 0x64
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f004 ffa3 	bl	8005a24 <memcpy>
					for (int sen = 0; sen < NUM_OF_SENSORS; sen++)
 8000ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000aec:	2b07      	cmp	r3, #7
 8000aee:	ddc1      	ble.n	8000a74 <main+0x140>
					}
					if (data_sent > 0)
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <main+0x270>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00b      	beq.n	8000b10 <main+0x1dc>
					{
						data_sent = 0;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x270>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
						if (data_ready > 0)
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <main+0x274>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <main+0x1d6>
						{
							errorLED();
 8000b06:	f000 fbab 	bl	8001260 <errorLED>
						}
						data_ready = 1;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <main+0x274>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (data_ready)
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <main+0x274>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00e      	beq.n	8000b36 <main+0x202>
			{

				HAL_UART_Transmit_DMA(&huart4, (uint8_t*)&msg, sizeof(msg));
 8000b18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b1c:	2260      	movs	r2, #96	; 0x60
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4819      	ldr	r0, [pc, #100]	; (8000b88 <main+0x254>)
 8000b22:	f003 fef5 	bl	8004910 <HAL_UART_Transmit_DMA>
				data_ready = 0;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <main+0x274>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
				time_read = read_time();
 8000b2c:	f000 ff1a 	bl	8001964 <read_time>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <main+0x278>)
 8000b34:	6013      	str	r3, [r2, #0]
			}

			if (uart_rec)
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <main+0x27c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d015      	beq.n	8000b6a <main+0x236>
			{
				switch (uart_rec)
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <main+0x27c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b64      	cmp	r3, #100	; 0x64
 8000b44:	d005      	beq.n	8000b52 <main+0x21e>
 8000b46:	2b73      	cmp	r3, #115	; 0x73
 8000b48:	d107      	bne.n	8000b5a <main+0x226>
				{
				case 's':
					measure = 1;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <main+0x26c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
					break;
 8000b50:	e003      	b.n	8000b5a <main+0x226>
				case 'd':
					measure = 0;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <main+0x26c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
					break;
 8000b58:	bf00      	nop
				}
				uart_rec = 0;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <main+0x27c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&huart4, &data_rec, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <main+0x250>)
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <main+0x254>)
 8000b66:	f003 ff43 	bl	80049f0 <HAL_UART_Receive_DMA>
			}

			if (error_tim >= PERIOD)
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x280>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b09      	cmp	r3, #9
 8000b70:	d901      	bls.n	8000b76 <main+0x242>
			{
				errorLED();
 8000b72:	f000 fb75 	bl	8001260 <errorLED>
			}
			error_tim = 0;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <main+0x280>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]

			min_tim = 0;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <main+0x264>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		if (min_tim > 0)
 8000b82:	e75c      	b.n	8000a3e <main+0x10a>
 8000b84:	200000d9 	.word	0x200000d9
 8000b88:	20000240 	.word	0x20000240
 8000b8c:	08005a58 	.word	0x08005a58
 8000b90:	200001f4 	.word	0x200001f4
 8000b94:	200001ac 	.word	0x200001ac
 8000b98:	2000019c 	.word	0x2000019c
 8000b9c:	200000d6 	.word	0x200000d6
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200000d8 	.word	0x200000d8
 8000bac:	200000dc 	.word	0x200000dc
 8000bb0:	2000023c 	.word	0x2000023c
 8000bb4:	2000019d 	.word	0x2000019d

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b090      	sub	sp, #64	; 0x40
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	2228      	movs	r2, #40	; 0x28
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fee8 	bl	800599c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f9d2 	bl	8002fac <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000c0e:	f000 f819 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fc3f 	bl	80034b0 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c38:	f000 f804 	bl	8000c44 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	; 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>

08000c4e <writeToRegister>:
uint32_t wait4dataRdy = 0;
uint32_t dataRdy = 0;
extern uint8_t fake;


void writeToRegister(uint16_t *pRegData, REGISTER_FEATURE pos, uint16_t value) {
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	803b      	strh	r3, [r7, #0]
	value <<= (uint16_t) pos;
 8000c5e:	883a      	ldrh	r2, [r7, #0]
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	803b      	strh	r3, [r7, #0]
	*pRegData |= value;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	881a      	ldrh	r2, [r3, #0]
 8000c6c:	883b      	ldrh	r3, [r7, #0]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	801a      	strh	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <sensor_init>:

Sensor sensor_init(uint8_t adr) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ba      	sub	sp, #232	; 0xe8
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
	Sensor sen = {
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8000cec:	2305      	movs	r3, #5
 8000cee:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8000cf8:	2306      	movs	r3, #6
 8000cfa:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000d04:	2307      	movs	r3, #7
 8000d06:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8000d10:	2308      	movs	r3, #8
 8000d12:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000d1c:	2309      	movs	r3, #9
 8000d1e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8000d28:	230a      	movs	r3, #10
 8000d2a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8000d34:	230b      	movs	r3, #11
 8000d36:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8000d40:	230c      	movs	r3, #12
 8000d42:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8000d4c:	230d      	movs	r3, #13
 8000d4e:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8000d58:	230e      	movs	r3, #14
 8000d5a:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8000d64:	230f      	movs	r3, #15
 8000d66:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8000d70:	2310      	movs	r3, #16
 8000d72:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8000d7c:	2311      	movs	r3, #17
 8000d7e:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8000d88:	2312      	movs	r3, #18
 8000d8a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 8000d94:	2313      	movs	r3, #19
 8000d96:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 8000da0:	2314      	movs	r3, #20
 8000da2:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	    .ANGLE_RESULT = { .adr = ANGLE_RESULT, .data = 0 },
	    .MAGNITUDE_RESULT = { .adr = MAGNITUDE_RESULT, .data = 0 }
	};


	uint8_t crc_disable[4] = { 0x0F, 0x00, 0x04, 0x07 };
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <sensor_init+0x210>)
 8000dae:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t reg_data[4] = { 0 };
 8000db0:	2300      	movs	r3, #0
 8000db2:	677b      	str	r3, [r7, #116]	; 0x74
	uint16_t realRegValue[4] = { 0 };
 8000db4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]

	select_sensor(sen.adr);
 8000dbe:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f9f6 	bl	80011b4 <select_sensor>
	HAL_SPI_TransmitReceive(&hspi1, crc_disable, reg_data, 4, 50);
 8000dc8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000dcc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000dd0:	2332      	movs	r3, #50	; 0x32
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	482f      	ldr	r0, [pc, #188]	; (8000e94 <sensor_init+0x214>)
 8000dd8:	f002 fec1 	bl	8003b5e <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f001 f825 	bl	8001e2c <HAL_Delay>
	deselect_sensor();
 8000de2:	f000 fa09 	bl	80011f8 <deselect_sensor>

	device_config(&sen);
 8000de6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f968 	bl	80010c0 <device_config>
	sensor_config(&sen);
 8000df0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f985 	bl	8001104 <sensor_config>
	system_config(&sen);
 8000dfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f9b6 	bl	8001170 <system_config>
	realRegValue[0] = read_register(&sen, TEST_CONFIG);
 8000e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e08:	210f      	movs	r1, #15
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f8b8 	bl	8000f80 <read_register>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	realRegValue[1] = read_register(&sen, DEVICE_CONFIG);
 8000e16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f8af 	bl	8000f80 <read_register>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	realRegValue[2] = read_register(&sen, SENSOR_CONFIG);
 8000e28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f8a6 	bl	8000f80 <read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	realRegValue[3] = read_register(&sen, SYSTEM_CONFIG);
 8000e3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f89d 	bl	8000f80 <read_register>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	if (registersAreSet(realRegValue)) {
 8000e4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f913 	bl	800107c <registersAreSet>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <sensor_init+0x1f4>
		sen.ok = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		return sen;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e6a:	2264      	movs	r2, #100	; 0x64
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f004 fdd9 	bl	8005a24 <memcpy>
 8000e72:	e009      	b.n	8000e88 <sensor_init+0x208>
	} else {
		Sensor error_sensor;
		error_sensor.ok = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	727b      	strb	r3, [r7, #9]
		return error_sensor;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	2264      	movs	r2, #100	; 0x64
 8000e82:	4619      	mov	r1, r3
 8000e84:	f004 fdce 	bl	8005a24 <memcpy>
	}

}
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	37e0      	adds	r7, #224	; 0xe0
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	0704000f 	.word	0x0704000f
 8000e94:	200000e8 	.word	0x200000e8

08000e98 <sensor_power_on>:

void sensor_power_off() {
	HAL_GPIO_WritePin(SEN_V_ENABLE_GPIO_Port, SEN_V_ENABLE_Pin, 1);
}

void sensor_power_on() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEN_V_ENABLE_GPIO_Port, SEN_V_ENABLE_Pin, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <sensor_power_on+0x14>)
 8000ea2:	f001 ff0d 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40011000 	.word	0x40011000

08000eb0 <deactivateSCLR>:
void deactivateSCLR() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLR_GPIO_Port, SCLR_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <deactivateSCLR+0x24>)
 8000eba:	f001 ff01 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f000 ffb4 	bl	8001e2c <HAL_Delay>
	HAL_GPIO_WritePin(SCLR_GPIO_Port, SCLR_Pin, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <deactivateSCLR+0x24>)
 8000eca:	f001 fef9 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <calc_crc>:

uint8_t calc_crc(REGISTER_ADR adr, uint16_t *data) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
	uint8_t xor_result;
	uint8_t crc_polynomial = 0x13;
 8000ee4:	2313      	movs	r3, #19
 8000ee6:	74fb      	strb	r3, [r7, #19]
	uint8_t crc_reg = 0x0F;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	77fb      	strb	r3, [r7, #31]
	uint8_t message[4] = { adr, (*data) >> 8, *data, crc_reg };
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	733b      	strb	r3, [r7, #12]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	737b      	strb	r3, [r7, #13]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	73bb      	strb	r3, [r7, #14]
 8000f04:	7ffb      	ldrb	r3, [r7, #31]
 8000f06:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_msb;
	uint8_t msg_msb;
	int j = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
	for (int i = 31; i >= 0; i--) {
 8000f0c:	231f      	movs	r3, #31
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e02a      	b.n	8000f68 <calc_crc+0x90>
		crc_msb = crc_reg >> 3;
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	74bb      	strb	r3, [r7, #18]
		msg_msb = (message[j] >> (i % 8)) & 0x01;
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	fa42 f303 	asr.w	r3, r2, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	747b      	strb	r3, [r7, #17]
		xor_result = crc_msb ^ msg_msb;
 8000f36:	7cba      	ldrb	r2, [r7, #18]
 8000f38:	7c7b      	ldrb	r3, [r7, #17]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	743b      	strb	r3, [r7, #16]
		crc_reg = crc_reg << 1;
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	77fb      	strb	r3, [r7, #31]

		if (xor_result) {
 8000f44:	7c3b      	ldrb	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <calc_crc+0x7a>
			crc_reg = crc_reg ^ crc_polynomial;
 8000f4a:	7ffa      	ldrb	r2, [r7, #31]
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	4053      	eors	r3, r2
 8000f50:	77fb      	strb	r3, [r7, #31]
		}

		if ((i % 8) == 0) {
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <calc_crc+0x8a>
			j++;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
	for (int i = 31; i >= 0; i--) {
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dad1      	bge.n	8000f12 <calc_crc+0x3a>
		}
	}
	return crc_reg & 0x0F;
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <read_register>:


uint16_t read_register(Sensor *sen, REGISTER_ADR reg) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
	uint16_t *pRegData = NULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
	uint8_t regAdr = -1;
 8000f90:	23ff      	movs	r3, #255	; 0xff
 8000f92:	72fb      	strb	r3, [r7, #11]

	if (reg == DEVICE_CONFIG) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <read_register+0x28>
		pRegData = &(sen->DEVICE_CONFIG.data);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3312      	adds	r3, #18
 8000f9e:	60fb      	str	r3, [r7, #12]
		regAdr = sen->DEVICE_CONFIG.adr;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7c1b      	ldrb	r3, [r3, #16]
 8000fa4:	72fb      	strb	r3, [r7, #11]
 8000fa6:	e053      	b.n	8001050 <read_register+0xd0>
	} else if (reg == SENSOR_CONFIG) {
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <read_register+0x3c>
		pRegData = &(sen->SENSOR_CONFIG.data);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3316      	adds	r3, #22
 8000fb2:	60fb      	str	r3, [r7, #12]
		regAdr = sen->SENSOR_CONFIG.adr;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7d1b      	ldrb	r3, [r3, #20]
 8000fb8:	72fb      	strb	r3, [r7, #11]
 8000fba:	e049      	b.n	8001050 <read_register+0xd0>
	} else if (reg == SYSTEM_CONFIG) {
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d106      	bne.n	8000fd0 <read_register+0x50>
		pRegData = &(sen->SYSTEM_CONFIG.data);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	331a      	adds	r3, #26
 8000fc6:	60fb      	str	r3, [r7, #12]
		regAdr = sen->SYSTEM_CONFIG.adr;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e1b      	ldrb	r3, [r3, #24]
 8000fcc:	72fb      	strb	r3, [r7, #11]
 8000fce:	e03f      	b.n	8001050 <read_register+0xd0>
	} else if (reg == TEST_CONFIG) {
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	d107      	bne.n	8000fe6 <read_register+0x66>
		pRegData = &(sen->TEST_CONFIG.data);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	334e      	adds	r3, #78	; 0x4e
 8000fda:	60fb      	str	r3, [r7, #12]
		regAdr = sen->TEST_CONFIG.adr;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000fe2:	72fb      	strb	r3, [r7, #11]
 8000fe4:	e034      	b.n	8001050 <read_register+0xd0>
	} else if (reg == CONV_STATUS) {
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d107      	bne.n	8000ffc <read_register+0x7c>
		pRegData = &(sen->CONV_STATUS.data);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3332      	adds	r3, #50	; 0x32
 8000ff0:	60fb      	str	r3, [r7, #12]
		regAdr = sen->CONV_STATUS.adr;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ff8:	72fb      	strb	r3, [r7, #11]
 8000ffa:	e029      	b.n	8001050 <read_register+0xd0>
	} else if (reg == X_CH_RESULT) {
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d107      	bne.n	8001012 <read_register+0x92>
		pRegData = &(sen->X_CH_RESULT.data);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3336      	adds	r3, #54	; 0x36
 8001006:	60fb      	str	r3, [r7, #12]
		regAdr = sen->X_CH_RESULT.adr;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	e01e      	b.n	8001050 <read_register+0xd0>
	} else if (reg == Y_CH_RESULT) {
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	2b0a      	cmp	r3, #10
 8001016:	d107      	bne.n	8001028 <read_register+0xa8>
		pRegData = &(sen->Y_CH_RESULT.data);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	333a      	adds	r3, #58	; 0x3a
 800101c:	60fb      	str	r3, [r7, #12]
		regAdr = sen->Y_CH_RESULT.adr;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001024:	72fb      	strb	r3, [r7, #11]
 8001026:	e013      	b.n	8001050 <read_register+0xd0>
	} else if (reg == Z_CH_RESULT) {
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2b0b      	cmp	r3, #11
 800102c:	d107      	bne.n	800103e <read_register+0xbe>
		pRegData = &(sen->Z_CH_RESULT.data);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	333e      	adds	r3, #62	; 0x3e
 8001032:	60fb      	str	r3, [r7, #12]
		regAdr = sen->Z_CH_RESULT.adr;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800103a:	72fb      	strb	r3, [r7, #11]
 800103c:	e008      	b.n	8001050 <read_register+0xd0>
	}

	else if ((pRegData == NULL) || (regAdr == -1)) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <read_register+0xca>
		return -1;
 8001044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001048:	e014      	b.n	8001074 <read_register+0xf4>
	} else {
		return -1;
 800104a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104e:	e011      	b.n	8001074 <read_register+0xf4>
	}

	select_sensor(sen->adr);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f8ad 	bl	80011b4 <select_sensor>
	*pRegData = spi_read_reg(regAdr, pRegData);
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fa82 	bl	8001568 <spi_read_reg>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	801a      	strh	r2, [r3, #0]
	deselect_sensor();
 800106c:	f000 f8c4 	bl	80011f8 <deselect_sensor>
	return *pRegData;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	881b      	ldrh	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <registersAreSet>:

uint32_t registersAreSet(uint16_t *testReg) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	if ((*testReg == TEST_REG_EXPECTED_VAL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b54      	cmp	r3, #84	; 0x54
 800108a:	d113      	bne.n	80010b4 <registersAreSet+0x38>
			&& (*(testReg + 1) == DEVICE_CONFIG_EXPECTED_VAL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3302      	adds	r3, #2
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	f5b3 5f81 	cmp.w	r3, #4128	; 0x1020
 8001096:	d10d      	bne.n	80010b4 <registersAreSet+0x38>
			&& (*(testReg + 2) == SENSOR_CONFIG_EXPECTED_VAL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3304      	adds	r3, #4
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f240 12d5 	movw	r2, #469	; 0x1d5
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <registersAreSet+0x38>
			&& (*(testReg + 3) == SYSTEM_CONFIG_EXPECTED_VAL)) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3306      	adds	r3, #6
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <registersAreSet+0x38>
		return 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <registersAreSet+0x3a>
	} else
		return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <device_config>:
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
	}
	deselect_sensor();
}

void device_config(Sensor *sen) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	//Current value: 0x1020 → 0b0001 0000 0010 0000
	uint16_t *pRegData = &(sen->DEVICE_CONFIG.data);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3312      	adds	r3, #18
 80010cc:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData, CONV_AVG, 0x01); // Best SNR
 80010ce:	2201      	movs	r2, #1
 80010d0:	210c      	movs	r1, #12
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fdbb 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, OPERATING_MODE, 0x2); //Continuous conversion
 80010d8:	2202      	movs	r2, #2
 80010da:	2104      	movs	r1, #4
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fdb6 	bl	8000c4e <writeToRegister>

	select_sensor(sen->adr);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f864 	bl	80011b4 <select_sensor>
	spi_write_reg(sen->DEVICE_CONFIG.adr, pRegData);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7c1b      	ldrb	r3, [r3, #16]
 80010f0:	68f9      	ldr	r1, [r7, #12]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fa6c 	bl	80015d0 <spi_write_reg>
	deselect_sensor();
 80010f8:	f000 f87e 	bl	80011f8 <deselect_sensor>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <sensor_config>:

void sensor_config(Sensor *sen) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	//Current value: 0x01D5 → 0b0000 0001 1101 0101
	uint16_t *pRegData = &(sen->SENSOR_CONFIG.data);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3316      	adds	r3, #22
 8001110:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData, ANGLE_EN, 0x00);
 8001112:	2200      	movs	r2, #0
 8001114:	210e      	movs	r1, #14
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fd99 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, SLEEPTIME, 0x00); //1ms sleeptime between conversions
 800111c:	2200      	movs	r2, #0
 800111e:	210a      	movs	r1, #10
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff fd94 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, MAG_CH_EN, 0x7); //X,Y,Z channel enabled
 8001126:	2207      	movs	r2, #7
 8001128:	2106      	movs	r1, #6
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff fd8f 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, Z_RANGE, 0x1); //+-75mT field range
 8001130:	2201      	movs	r2, #1
 8001132:	2104      	movs	r1, #4
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff fd8a 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, Y_RANGE, 0x1); //+-75mT field range
 800113a:	2201      	movs	r2, #1
 800113c:	2102      	movs	r1, #2
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fd85 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, X_RANGE, 0x1); //+-75mT field range
 8001144:	2201      	movs	r2, #1
 8001146:	2100      	movs	r1, #0
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff fd80 	bl	8000c4e <writeToRegister>

	select_sensor(sen->adr);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f82e 	bl	80011b4 <select_sensor>
	spi_write_reg(sen->SENSOR_CONFIG.adr, pRegData);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7d1b      	ldrb	r3, [r3, #20]
 800115c:	68f9      	ldr	r1, [r7, #12]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fa36 	bl	80015d0 <spi_write_reg>
	deselect_sensor();
 8001164:	f000 f848 	bl	80011f8 <deselect_sensor>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <system_config>:

void system_config(Sensor *sen) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	//Current value: 0x00
	uint16_t *pRegData = &(sen->SYSTEM_CONFIG.data);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	331a      	adds	r3, #26
 800117c:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData, TRIGGER_MODE, 0x00); //Conversion on CS pulse
 800117e:	2200      	movs	r2, #0
 8001180:	2109      	movs	r1, #9
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff fd63 	bl	8000c4e <writeToRegister>
	writeToRegister(pRegData, DATA_TYPE, 0x00);
 8001188:	2200      	movs	r2, #0
 800118a:	2106      	movs	r1, #6
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fd5e 	bl	8000c4e <writeToRegister>

	select_sensor(sen->adr);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f80c 	bl	80011b4 <select_sensor>
	spi_write_reg(sen->SYSTEM_CONFIG.adr, pRegData);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e1b      	ldrb	r3, [r3, #24]
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fa14 	bl	80015d0 <spi_write_reg>
	deselect_sensor();
 80011a8:	f000 f826 	bl	80011f8 <deselect_sensor>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <select_sensor>:

void select_sensor(uint8_t adr) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	uint16_t message = ~(1 << (8 - adr + 7));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f1c3 030f 	rsb	r3, r3, #15
 80011c4:	2201      	movs	r2, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
	set_sh_reg_OE(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 f828 	bl	8001228 <set_sh_reg_OE>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &message, 2, 10);
 80011d8:	f107 010e 	add.w	r1, r7, #14
 80011dc:	230a      	movs	r3, #10
 80011de:	2202      	movs	r2, #2
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <select_sensor+0x40>)
 80011e2:	f002 fb79 	bl	80038d8 <HAL_SPI_Transmit>
	set_sh_reg_OE(0);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f81e 	bl	8001228 <set_sh_reg_OE>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000140 	.word	0x20000140

080011f8 <deselect_sensor>:

void deselect_sensor() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint16_t message = 0xFFFF;
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	80fb      	strh	r3, [r7, #6]
	set_sh_reg_OE(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 f80f 	bl	8001228 <set_sh_reg_OE>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &message, 2, 10);
 800120a:	1db9      	adds	r1, r7, #6
 800120c:	230a      	movs	r3, #10
 800120e:	2202      	movs	r2, #2
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <deselect_sensor+0x2c>)
 8001212:	f002 fb61 	bl	80038d8 <HAL_SPI_Transmit>
	set_sh_reg_OE(0);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f806 	bl	8001228 <set_sh_reg_OE>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000140 	.word	0x20000140

08001228 <set_sh_reg_OE>:

void set_sh_reg_OE(uint32_t value) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, value);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	2110      	movs	r1, #16
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <set_sh_reg_OE+0x20>)
 800123a:	f001 fd41 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000

0800124c <measuringLED>:

void measuringLED() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_MEASURING_GPIO_Port, LED_MEASURING_Pin);
 8001250:	2104      	movs	r1, #4
 8001252:	4802      	ldr	r0, [pc, #8]	; (800125c <measuringLED+0x10>)
 8001254:	f001 fd4c 	bl	8002cf0 <HAL_GPIO_TogglePin>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010c00 	.word	0x40010c00

08001260 <errorLED>:

void errorLED() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <errorLED+0x18>)
 800126a:	f001 fd41 	bl	8002cf0 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800126e:	2032      	movs	r0, #50	; 0x32
 8001270:	f000 fddc 	bl	8001e2c <HAL_Delay>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010c00 	.word	0x40010c00

0800127c <read_sensor_data>:
void statusLED() {
	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
}

void read_sensor_data(Sensor *sen)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	uint16_t conv_status = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	82fb      	strh	r3, [r7, #22]
	uint8_t rdy = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	757b      	strb	r3, [r7, #21]
	uint8_t dataAreCurrent = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	753b      	strb	r3, [r7, #20]


	if (sen->adr == 4)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d06a      	beq.n	800136e <read_sensor_data+0xf2>
		return;

	if (sen->ok) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d067      	beq.n	8001370 <read_sensor_data+0xf4>

		do {
			conv_status = read_register(sen, CONV_STATUS);
 80012a0:	2108      	movs	r1, #8
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fe6c 	bl	8000f80 <read_register>
 80012a8:	4603      	mov	r3, r0
 80012aa:	82fb      	strh	r3, [r7, #22]


			rdy = conv_status & (1 << 13) ? 1 : 0;
 80012ac:	8afb      	ldrh	r3, [r7, #22]
 80012ae:	135b      	asrs	r3, r3, #13
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	757b      	strb	r3, [r7, #21]
			dataAreCurrent = conv_status & (0x07 << 8) ? 1 : 0;
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	753b      	strb	r3, [r7, #20]
		} while (!(dataAreCurrent && rdy));
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0e7      	beq.n	80012a0 <read_sensor_data+0x24>
 80012d0:	7d7b      	ldrb	r3, [r7, #21]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0e4      	beq.n	80012a0 <read_sensor_data+0x24>
//		if (!(dataAreCurrent && rdy))
//		{
//			return;
//		}

		int32_t lsb = (2 * RANGE * 1000000) / (1 << 16); //LSB in nT
 80012d6:	f44f 630f 	mov.w	r3, #2288	; 0x8f0
 80012da:	613b      	str	r3, [r7, #16]
		measuringLED();
 80012dc:	f7ff ffb6 	bl	800124c <measuringLED>
		wait4dataRdy=TIM2->CNT;
 80012e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <read_sensor_data+0xfc>)
 80012e8:	6013      	str	r3, [r2, #0]
		int16_t x_result = read_register(sen, X_CH_RESULT);
 80012ea:	2109      	movs	r1, #9
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fe47 	bl	8000f80 <read_register>
 80012f2:	4603      	mov	r3, r0
 80012f4:	81fb      	strh	r3, [r7, #14]
		int16_t y_result = read_register(sen, Y_CH_RESULT);
 80012f6:	210a      	movs	r1, #10
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fe41 	bl	8000f80 <read_register>
 80012fe:	4603      	mov	r3, r0
 8001300:	81bb      	strh	r3, [r7, #12]
		int16_t z_result = read_register(sen, Z_CH_RESULT);
 8001302:	210b      	movs	r1, #11
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fe3b 	bl	8000f80 <read_register>
 800130a:	4603      	mov	r3, r0
 800130c:	817b      	strh	r3, [r7, #10]
		if(wait4dataRdy>0)
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <read_sensor_data+0xfc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <read_sensor_data+0xaa>
		{
			dataRdy = TIM2->CNT - wait4dataRdy;
 8001316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <read_sensor_data+0xfc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <read_sensor_data+0x100>)
 8001324:	6013      	str	r3, [r2, #0]
		}

		//sen->measured_data.x_B = (int16_t)((((int32_t) x_result) * lsb)/1000000); -> 16bit hodnota v ms
		if(fake)
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <read_sensor_data+0x104>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <read_sensor_data+0xc6>
		{
			sen->measured_data.x_B = (int32_t)('3');
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2233      	movs	r2, #51	; 0x33
 8001332:	605a      	str	r2, [r3, #4]
			sen->measured_data.y_B = (int32_t)('4');
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2234      	movs	r2, #52	; 0x34
 8001338:	609a      	str	r2, [r3, #8]
			sen->measured_data.z_B = (int32_t)('5');
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2235      	movs	r2, #53	; 0x35
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	e016      	b.n	8001370 <read_sensor_data+0xf4>
		}
		else
		{
			sen->measured_data.x_B = ((int32_t) x_result) * lsb;
 8001342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	fb03 f202 	mul.w	r2, r3, r2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]
			sen->measured_data.y_B = ((int32_t) y_result) * lsb;
 8001350:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	fb03 f202 	mul.w	r2, r3, r2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
			sen->measured_data.z_B = ((int32_t) z_result) * lsb;
 800135e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	fb03 f202 	mul.w	r2, r3, r2
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	e000      	b.n	8001370 <read_sensor_data+0xf4>
		return;
 800136e:	bf00      	nop
		}

	}
}
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000e0 	.word	0x200000e0
 800137c:	200000e4 	.word	0x200000e4
 8001380:	200000d4 	.word	0x200000d4

08001384 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_SPI1_Init+0x64>)
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <MX_SPI1_Init+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_SPI1_Init+0x64>)
 8001390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013b8:	2210      	movs	r2, #16
 80013ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013d6:	f002 f9fb 	bl	80037d0 <HAL_SPI_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e0:	f7ff fc30 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000e8 	.word	0x200000e8
 80013ec:	40013000 	.word	0x40013000

080013f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_SPI2_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <MX_SPI2_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI2_Init+0x64>)
 80013fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001400:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI2_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_SPI2_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI2_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI2_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI2_Init+0x64>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI2_Init+0x64>)
 8001424:	2230      	movs	r2, #48	; 0x30
 8001426:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_SPI2_Init+0x64>)
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI2_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_SPI2_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI2_Init+0x64>)
 800143c:	220a      	movs	r2, #10
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_SPI2_Init+0x64>)
 8001442:	f002 f9c5 	bl	80037d0 <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800144c:	f7ff fbfa 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000140 	.word	0x20000140
 8001458:	40003800 	.word	0x40003800

0800145c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a37      	ldr	r2, [pc, #220]	; (8001554 <HAL_SPI_MspInit+0xf8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d130      	bne.n	80014de <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 8001482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	4619      	mov	r1, r3
 80014be:	4827      	ldr	r0, [pc, #156]	; (800155c <HAL_SPI_MspInit+0x100>)
 80014c0:	f001 fa6a 	bl	8002998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4821      	ldr	r0, [pc, #132]	; (800155c <HAL_SPI_MspInit+0x100>)
 80014d8:	f001 fa5e 	bl	8002998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014dc:	e036      	b.n	800154c <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <HAL_SPI_MspInit+0x104>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d131      	bne.n	800154c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f2:	61d3      	str	r3, [r2, #28]
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_SPI_MspInit+0xfc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCK_SHREG_Pin|MOSI_SHREG_Pin;
 8001518:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4619      	mov	r1, r3
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <HAL_SPI_MspInit+0x108>)
 800152e:	f001 fa33 	bl	8002998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_SHREG_Pin;
 8001532:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MISO_SHREG_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <HAL_SPI_MspInit+0x108>)
 8001548:	f001 fa26 	bl	8002998 <HAL_GPIO_Init>
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013000 	.word	0x40013000
 8001558:	40021000 	.word	0x40021000
 800155c:	40010800 	.word	0x40010800
 8001560:	40003800 	.word	0x40003800
 8001564:	40010c00 	.word	0x40010c00

08001568 <spi_read_reg>:
#include "main.h"

#define SPI_MESSAGE_LENGTH 4

uint16_t spi_read_reg(uint8_t regAdr, uint16_t *stat)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[4]={0x00};
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
	uint8_t rxData[4]={0x00};
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
	uint16_t msg;
	regAdr |= 0x80; //MSB 1 for reading
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001582:	71fb      	strb	r3, [r7, #7]
	txData[0] = regAdr;
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	743b      	strb	r3, [r7, #16]
	HAL_SPI_TransmitReceive(&hspi1,txData,rxData,4,10);
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	f107 0110 	add.w	r1, r7, #16
 8001590:	230a      	movs	r3, #10
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2304      	movs	r3, #4
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <spi_read_reg+0x64>)
 8001598:	f002 fae1 	bl	8003b5e <HAL_SPI_TransmitReceive>
	*stat = (rxData[0]<<8) + rxData[3];
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	801a      	strh	r2, [r3, #0]
	msg = ((rxData[1]<<8) + rxData[2]);
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	7bbb      	ldrb	r3, [r7, #14]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4413      	add	r3, r2
 80015be:	82fb      	strh	r3, [r7, #22]
	return msg;
 80015c0:	8afb      	ldrh	r3, [r7, #22]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000e8 	.word	0x200000e8

080015d0 <spi_write_reg>:

void spi_write_reg(REGISTER_ADR regAdr,uint16_t* pRegData)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
	uint8_t message[4];
	regAdr |= 0x00;              //First MSB bitm must be
	message[0] = regAdr;         //Write an address with first bit set to 0
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	733b      	strb	r3, [r7, #12]
	message[1] = *pRegData>>8;    //Write data to register 8MSB bits
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	737b      	strb	r3, [r7, #13]
	message[2] = *pRegData;       //Write data to register 8LSB bits
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	73bb      	strb	r3, [r7, #14]
	message[3] = calc_crc(regAdr, pRegData); //TODO: CRC!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        //Write cmd to start conversion on next CS going high
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc6d 	bl	8000ed8 <calc_crc>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, message, SPI_MESSAGE_LENGTH, HAL_MAX_DELAY);
 8001602:	f107 010c 	add.w	r1, r7, #12
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	2204      	movs	r2, #4
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <spi_write_reg+0x4c>)
 800160e:	f002 f963 	bl	80038d8 <HAL_SPI_Transmit>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000e8 	.word	0x200000e8

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_MspInit+0x5c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_MspInit+0x5c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_MspInit+0x60>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_MspInit+0x60>)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 fb93 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <TIM2_IRQHandler+0x10>)
 80016da:	f002 fd47 	bl	800416c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001ac 	.word	0x200001ac

080016e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM5_IRQHandler+0x10>)
 80016ee:	f002 fd3d 	bl	800416c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001f4 	.word	0x200001f4

080016fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <UART4_IRQHandler+0x10>)
 8001702:	f003 f99b 	bl	8004a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000240 	.word	0x20000240

08001710 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA2_Channel3_IRQHandler+0x10>)
 8001716:	f000 fed5 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000314 	.word	0x20000314

08001724 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Channel4_5_IRQHandler+0x10>)
 800172a:	f000 fecb 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002d0 	.word	0x200002d0

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f004 f930 	bl	80059cc <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20010000 	.word	0x20010000
 8001798:	00000400 	.word	0x00000400
 800179c:	20000198 	.word	0x20000198
 80017a0:	200004a8 	.word	0x200004a8

080017a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM2_Init+0x94>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_TIM2_Init+0x94>)
 80017d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <MX_TIM2_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM2_Init+0x94>)
 80017e4:	2209      	movs	r2, #9
 80017e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_TIM2_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_TIM2_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	; (8001844 <MX_TIM2_Init+0x94>)
 80017f6:	f002 fc09 	bl	800400c <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001800:	f7ff fa20 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM2_Init+0x94>)
 8001812:	f002 fdb3 	bl	800437c <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800181c:	f7ff fa12 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_TIM2_Init+0x94>)
 800182e:	f002 ffa1 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001838:	f7ff fa04 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200001ac 	.word	0x200001ac

08001848 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM5_Init+0x94>)
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <MX_TIM5_Init+0x98>)
 8001868:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7200-1;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM5_Init+0x94>)
 800186c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001870:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM5_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_TIM5_Init+0x94>)
 800187a:	f242 720f 	movw	r2, #9999	; 0x270f
 800187e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_TIM5_Init+0x94>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM5_Init+0x94>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_TIM5_Init+0x94>)
 800188e:	f002 fbbd 	bl	800400c <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001898:	f7ff f9d4 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_TIM5_Init+0x94>)
 80018aa:	f002 fd67 	bl	800437c <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80018b4:	f7ff f9c6 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM5_Init+0x94>)
 80018c6:	f002 ff55 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018d0:	f7ff f9b8 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200001f4 	.word	0x200001f4
 80018e0:	40000c00 	.word	0x40000c00

080018e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f4:	d114      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	61d3      	str	r3, [r2, #28]
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	201c      	movs	r0, #28
 8001914:	f000 fb85 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001918:	201c      	movs	r0, #28
 800191a:	f000 fb9e 	bl	800205a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800191e:	e018      	b.n	8001952 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM5)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_TIM_Base_MspInit+0x7c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d113      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_TIM_Base_MspInit+0x78>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2032      	movs	r0, #50	; 0x32
 8001948:	f000 fb6b 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800194c:	2032      	movs	r0, #50	; 0x32
 800194e:	f000 fb84 	bl	800205a <HAL_NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40000c00 	.word	0x40000c00

08001964 <read_time>:
}

/* USER CODE BEGIN 1 */

float read_time()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	uint32_t time_diff = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]

	time_diff = (time_1s_cnt - time_last_1s) * 100;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <read_time+0x7c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <read_time+0x80>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2264      	movs	r2, #100	; 0x64
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	607b      	str	r3, [r7, #4]
	if (TIM5->CNT > time_last_100us )
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <read_time+0x84>)
 8001982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <read_time+0x88>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <read_time+0x3a>
	{
		time_diff += (TIM5->CNT - time_last_100us);
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <read_time+0x84>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <read_time+0x88>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	e00a      	b.n	80019b4 <read_time+0x50>
	}
	else
	{
		time_diff += ((10000 - time_last_100us) + TIM5->CNT);
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <read_time+0x84>)
 80019a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <read_time+0x88>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80019ac:	3310      	adds	r3, #16
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	607b      	str	r3, [r7, #4]
	}

	time_last_1s = time_1s_cnt;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <read_time+0x7c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <read_time+0x80>)
 80019ba:	6013      	str	r3, [r2, #0]
	time_last_100us = TIM5->CNT;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <read_time+0x84>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <read_time+0x88>)
 80019c2:	6013      	str	r3, [r2, #0]

	return ((float)time_diff) / 10;
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7fe fce3 	bl	8000390 <__aeabi_ui2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4908      	ldr	r1, [pc, #32]	; (80019f0 <read_time+0x8c>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdea 	bl	80005a8 <__aeabi_fdiv>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001a0 	.word	0x200001a0
 80019e4:	200001a4 	.word	0x200001a4
 80019e8:	40000c00 	.word	0x40000c00
 80019ec:	200001a8 	.word	0x200001a8
 80019f0:	41200000 	.word	0x41200000

080019f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a04:	d10c      	bne.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (min_tim > 0)
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			error_tim++;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a18:	701a      	strb	r2, [r3, #0]
		}
		min_tim = 1;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == TIM5)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d104      	bne.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		time_1s_cnt++;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a32:	6013      	str	r3, [r2, #0]
	}
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000019c 	.word	0x2000019c
 8001a44:	2000019d 	.word	0x2000019d
 8001a48:	40000c00 	.word	0x40000c00
 8001a4c:	200001a0 	.word	0x200001a0

08001a50 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_tx;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_UART4_Init+0x50>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a5c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a88:	f002 fef2 	bl	8004870 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a92:	f7ff f8d7 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000240 	.word	0x20000240
 8001aa0:	40004c00 	.word	0x40004c00

08001aa4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_UART5_Init+0x50>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_UART5_Init+0x4c>)
 8001adc:	f002 fec8 	bl	8004870 <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001ae6:	f7ff f8ad 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000288 	.word	0x20000288
 8001af4:	40005000 	.word	0x40005000

08001af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a68      	ldr	r2, [pc, #416]	; (8001cb4 <HAL_UART_MspInit+0x1bc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	f040 8087 	bne.w	8001c28 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4857      	ldr	r0, [pc, #348]	; (8001cbc <HAL_UART_MspInit+0x1c4>)
 8001b60:	f000 ff1a 	bl	8002998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	4619      	mov	r1, r3
 8001b78:	4850      	ldr	r0, [pc, #320]	; (8001cbc <HAL_UART_MspInit+0x1c4>)
 8001b7a:	f000 ff0d 	bl	8002998 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8001b7e:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_UART_MspInit+0x1cc>)
 8001b82:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b84:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8a:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9c:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba8:	4b45      	ldr	r3, [pc, #276]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bae:	4844      	ldr	r0, [pc, #272]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001bb0:	f000 fa6e 	bl	8002090 <HAL_DMA_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001bba:	f7ff f843 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a3f      	ldr	r2, [pc, #252]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc4:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <HAL_UART_MspInit+0x1c8>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ccc <HAL_UART_MspInit+0x1d4>)
 8001bce:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be8:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001bfa:	4833      	ldr	r0, [pc, #204]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001bfc:	f000 fa48 	bl	8002090 <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001c06:	f7ff f81d 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c10:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <HAL_UART_MspInit+0x1d0>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2034      	movs	r0, #52	; 0x34
 8001c1c:	f000 fa01 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c20:	2034      	movs	r0, #52	; 0x34
 8001c22:	f000 fa1a 	bl	800205a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001c26:	e041      	b.n	8001cac <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==UART5)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_UART_MspInit+0x1d8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d13c      	bne.n	8001cac <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	6193      	str	r3, [r2, #24]
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	6193      	str	r3, [r2, #24]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_UART_MspInit+0x1c0>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480b      	ldr	r0, [pc, #44]	; (8001cbc <HAL_UART_MspInit+0x1c4>)
 8001c90:	f000 fe82 	bl	8002998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c94:	2304      	movs	r3, #4
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <HAL_UART_MspInit+0x1dc>)
 8001ca8:	f000 fe76 	bl	8002998 <HAL_GPIO_Init>
}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40004c00 	.word	0x40004c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	200002d0 	.word	0x200002d0
 8001cc4:	40020458 	.word	0x40020458
 8001cc8:	20000314 	.word	0x20000314
 8001ccc:	40020430 	.word	0x40020430
 8001cd0:	40005000 	.word	0x40005000
 8001cd4:	40011400 	.word	0x40011400

08001cd8 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	uart_rec = 1;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_UART_RxCpltCallback+0x18>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	2000023c 	.word	0x2000023c

08001cf4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if (data_sent > 0)
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_UART_TxCpltCallback+0x24>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_TxCpltCallback+0x14>
	{
		errorLED();
 8001d04:	f7ff faac 	bl	8001260 <errorLED>
	}
	data_sent = 1;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_UART_TxCpltCallback+0x24>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d1c:	f7ff fd42 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d38:	4c09      	ldr	r4, [pc, #36]	; (8001d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f003 fe47 	bl	80059d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7fe fdf3 	bl	8000934 <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001d58:	08005a98 	.word	0x08005a98
  ldr r2, =_sbss
 8001d5c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001d60:	200004a4 	.word	0x200004a4

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_Init+0x28>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_Init+0x28>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f947 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fc4c 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f95f 	bl	8002076 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f927 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000010 	.word	0x20000010
 8001df0:	2000000c 	.word	0x2000000c

08001df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x1c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x20>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <HAL_IncTick+0x20>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000010 	.word	0x20000010
 8001e14:	20000358 	.word	0x20000358

08001e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_GetTick+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000358 	.word	0x20000358

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffe0 	bl	8001e18 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000010 	.word	0x20000010

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <__NVIC_EnableIRQ+0x34>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff90 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff2d 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff42 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff35 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e059      	b.n	800215a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_DMA_Init+0xd4>)
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d80f      	bhi.n	80020d2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_DMA_Init+0xd8>)
 80020ba:	4413      	add	r3, r2
 80020bc:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_DMA_Init+0xdc>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_DMA_Init+0xe0>)
 80020ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80020d0:	e00e      	b.n	80020f0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_DMA_Init+0xe4>)
 80020da:	4413      	add	r3, r2
 80020dc:	4a23      	ldr	r2, [pc, #140]	; (800216c <HAL_DMA_Init+0xdc>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_DMA_Init+0xe8>)
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002106:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800210a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40020407 	.word	0x40020407
 8002168:	bffdfff8 	.word	0xbffdfff8
 800216c:	cccccccd 	.word	0xcccccccd
 8002170:	40020000 	.word	0x40020000
 8002174:	bffdfbf8 	.word	0xbffdfbf8
 8002178:	40020400 	.word	0x40020400

0800217c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_DMA_Start_IT+0x20>
 8002198:	2302      	movs	r3, #2
 800219a:	e04b      	b.n	8002234 <HAL_DMA_Start_IT+0xb8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d13a      	bne.n	8002226 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fbb1 	bl	800293c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 020e 	orr.w	r2, r2, #14
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e00f      	b.n	8002214 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 020a 	orr.w	r2, r2, #10
 8002212:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e005      	b.n	8002232 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d008      	beq.n	8002266 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e020      	b.n	80022a8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020e 	bic.w	r2, r2, #14
 8002274:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d005      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2204      	movs	r2, #4
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e0d6      	b.n	8002486 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020e 	bic.w	r2, r2, #14
 80022e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b64      	ldr	r3, [pc, #400]	; (8002490 <HAL_DMA_Abort_IT+0x1dc>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d958      	bls.n	80023b6 <HAL_DMA_Abort_IT+0x102>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a62      	ldr	r2, [pc, #392]	; (8002494 <HAL_DMA_Abort_IT+0x1e0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d04f      	beq.n	80023ae <HAL_DMA_Abort_IT+0xfa>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_DMA_Abort_IT+0x1e4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d048      	beq.n	80023aa <HAL_DMA_Abort_IT+0xf6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_DMA_Abort_IT+0x1e8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d040      	beq.n	80023a4 <HAL_DMA_Abort_IT+0xf0>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5e      	ldr	r2, [pc, #376]	; (80024a0 <HAL_DMA_Abort_IT+0x1ec>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d038      	beq.n	800239e <HAL_DMA_Abort_IT+0xea>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_DMA_Abort_IT+0x1f0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d030      	beq.n	8002398 <HAL_DMA_Abort_IT+0xe4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <HAL_DMA_Abort_IT+0x1f4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d028      	beq.n	8002392 <HAL_DMA_Abort_IT+0xde>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_DMA_Abort_IT+0x1dc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d020      	beq.n	800238c <HAL_DMA_Abort_IT+0xd8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_DMA_Abort_IT+0x1f8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d019      	beq.n	8002388 <HAL_DMA_Abort_IT+0xd4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a55      	ldr	r2, [pc, #340]	; (80024b0 <HAL_DMA_Abort_IT+0x1fc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d012      	beq.n	8002384 <HAL_DMA_Abort_IT+0xd0>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a54      	ldr	r2, [pc, #336]	; (80024b4 <HAL_DMA_Abort_IT+0x200>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00a      	beq.n	800237e <HAL_DMA_Abort_IT+0xca>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_DMA_Abort_IT+0x204>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d102      	bne.n	8002378 <HAL_DMA_Abort_IT+0xc4>
 8002372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002376:	e01b      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	e018      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 800237e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002382:	e015      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 8002384:	2310      	movs	r3, #16
 8002386:	e013      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 8002388:	2301      	movs	r3, #1
 800238a:	e011      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 800238c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002390:	e00e      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 8002392:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002396:	e00b      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 8002398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239c:	e008      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 800239e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a2:	e005      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 80023a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a8:	e002      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 80023aa:	2310      	movs	r3, #16
 80023ac:	e000      	b.n	80023b0 <HAL_DMA_Abort_IT+0xfc>
 80023ae:	2301      	movs	r3, #1
 80023b0:	4a42      	ldr	r2, [pc, #264]	; (80024bc <HAL_DMA_Abort_IT+0x208>)
 80023b2:	6053      	str	r3, [r2, #4]
 80023b4:	e057      	b.n	8002466 <HAL_DMA_Abort_IT+0x1b2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a36      	ldr	r2, [pc, #216]	; (8002494 <HAL_DMA_Abort_IT+0x1e0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d04f      	beq.n	8002460 <HAL_DMA_Abort_IT+0x1ac>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_DMA_Abort_IT+0x1e4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d048      	beq.n	800245c <HAL_DMA_Abort_IT+0x1a8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_DMA_Abort_IT+0x1e8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d040      	beq.n	8002456 <HAL_DMA_Abort_IT+0x1a2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_DMA_Abort_IT+0x1ec>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d038      	beq.n	8002450 <HAL_DMA_Abort_IT+0x19c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a30      	ldr	r2, [pc, #192]	; (80024a4 <HAL_DMA_Abort_IT+0x1f0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d030      	beq.n	800244a <HAL_DMA_Abort_IT+0x196>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <HAL_DMA_Abort_IT+0x1f4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d028      	beq.n	8002444 <HAL_DMA_Abort_IT+0x190>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a26      	ldr	r2, [pc, #152]	; (8002490 <HAL_DMA_Abort_IT+0x1dc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d020      	beq.n	800243e <HAL_DMA_Abort_IT+0x18a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <HAL_DMA_Abort_IT+0x1f8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_DMA_Abort_IT+0x186>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_DMA_Abort_IT+0x1fc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d012      	beq.n	8002436 <HAL_DMA_Abort_IT+0x182>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <HAL_DMA_Abort_IT+0x200>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00a      	beq.n	8002430 <HAL_DMA_Abort_IT+0x17c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <HAL_DMA_Abort_IT+0x204>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d102      	bne.n	800242a <HAL_DMA_Abort_IT+0x176>
 8002424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002428:	e01b      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 800242a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242e:	e018      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 8002430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002434:	e015      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 8002436:	2310      	movs	r3, #16
 8002438:	e013      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 800243a:	2301      	movs	r3, #1
 800243c:	e011      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 800243e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002442:	e00e      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 8002444:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002448:	e00b      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 800244a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244e:	e008      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 8002450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002454:	e005      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	e002      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 800245c:	2310      	movs	r3, #16
 800245e:	e000      	b.n	8002462 <HAL_DMA_Abort_IT+0x1ae>
 8002460:	2301      	movs	r3, #1
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_DMA_Abort_IT+0x20c>)
 8002464:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
    } 
  }
  return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020080 	.word	0x40020080
 8002494:	40020008 	.word	0x40020008
 8002498:	4002001c 	.word	0x4002001c
 800249c:	40020030 	.word	0x40020030
 80024a0:	40020044 	.word	0x40020044
 80024a4:	40020058 	.word	0x40020058
 80024a8:	4002006c 	.word	0x4002006c
 80024ac:	40020408 	.word	0x40020408
 80024b0:	4002041c 	.word	0x4002041c
 80024b4:	40020430 	.word	0x40020430
 80024b8:	40020444 	.word	0x40020444
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2204      	movs	r2, #4
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80f1 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x20c>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80eb 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <HAL_DMA_IRQHandler+0x1d8>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d958      	bls.n	80025d6 <HAL_DMA_IRQHandler+0x112>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_DMA_IRQHandler+0x1dc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04f      	beq.n	80025ce <HAL_DMA_IRQHandler+0x10a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_DMA_IRQHandler+0x1e0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d048      	beq.n	80025ca <HAL_DMA_IRQHandler+0x106>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_DMA_IRQHandler+0x1e4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d040      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x100>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a59      	ldr	r2, [pc, #356]	; (80026ac <HAL_DMA_IRQHandler+0x1e8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d038      	beq.n	80025be <HAL_DMA_IRQHandler+0xfa>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_DMA_IRQHandler+0x1ec>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d030      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xf4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a56      	ldr	r2, [pc, #344]	; (80026b4 <HAL_DMA_IRQHandler+0x1f0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d028      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xee>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a4d      	ldr	r2, [pc, #308]	; (800269c <HAL_DMA_IRQHandler+0x1d8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d020      	beq.n	80025ac <HAL_DMA_IRQHandler+0xe8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d019      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xe4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a50      	ldr	r2, [pc, #320]	; (80026bc <HAL_DMA_IRQHandler+0x1f8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d012      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xe0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4f      	ldr	r2, [pc, #316]	; (80026c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00a      	beq.n	800259e <HAL_DMA_IRQHandler+0xda>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a4d      	ldr	r2, [pc, #308]	; (80026c4 <HAL_DMA_IRQHandler+0x200>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d102      	bne.n	8002598 <HAL_DMA_IRQHandler+0xd4>
 8002592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002596:	e01b      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 8002598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800259c:	e018      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 800259e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a2:	e015      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	e013      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e011      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025b0:	e00e      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b6:	e00b      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025bc:	e008      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025c2:	e005      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c8:	e002      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	e000      	b.n	80025d0 <HAL_DMA_IRQHandler+0x10c>
 80025ce:	2304      	movs	r3, #4
 80025d0:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <HAL_DMA_IRQHandler+0x204>)
 80025d2:	6053      	str	r3, [r2, #4]
 80025d4:	e057      	b.n	8002686 <HAL_DMA_IRQHandler+0x1c2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <HAL_DMA_IRQHandler+0x1dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d04f      	beq.n	8002680 <HAL_DMA_IRQHandler+0x1bc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <HAL_DMA_IRQHandler+0x1e0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d048      	beq.n	800267c <HAL_DMA_IRQHandler+0x1b8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <HAL_DMA_IRQHandler+0x1e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d040      	beq.n	8002676 <HAL_DMA_IRQHandler+0x1b2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <HAL_DMA_IRQHandler+0x1e8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d038      	beq.n	8002670 <HAL_DMA_IRQHandler+0x1ac>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <HAL_DMA_IRQHandler+0x1ec>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d030      	beq.n	800266a <HAL_DMA_IRQHandler+0x1a6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <HAL_DMA_IRQHandler+0x1f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d028      	beq.n	8002664 <HAL_DMA_IRQHandler+0x1a0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <HAL_DMA_IRQHandler+0x1d8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d020      	beq.n	800265e <HAL_DMA_IRQHandler+0x19a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_DMA_IRQHandler+0x196>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_DMA_IRQHandler+0x1f8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0x192>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x18c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_DMA_IRQHandler+0x200>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d102      	bne.n	800264a <HAL_DMA_IRQHandler+0x186>
 8002644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002648:	e01b      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 800264a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800264e:	e018      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 8002650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002654:	e015      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 8002656:	2340      	movs	r3, #64	; 0x40
 8002658:	e013      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 800265a:	2304      	movs	r3, #4
 800265c:	e011      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 800265e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002662:	e00e      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 8002664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002668:	e00b      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 800266a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800266e:	e008      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 8002670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002674:	e005      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 8002676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267a:	e002      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 800267c:	2340      	movs	r3, #64	; 0x40
 800267e:	e000      	b.n	8002682 <HAL_DMA_IRQHandler+0x1be>
 8002680:	2304      	movs	r3, #4
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_DMA_IRQHandler+0x208>)
 8002684:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8136 	beq.w	80028fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002698:	e130      	b.n	80028fc <HAL_DMA_IRQHandler+0x438>
 800269a:	bf00      	nop
 800269c:	40020080 	.word	0x40020080
 80026a0:	40020008 	.word	0x40020008
 80026a4:	4002001c 	.word	0x4002001c
 80026a8:	40020030 	.word	0x40020030
 80026ac:	40020044 	.word	0x40020044
 80026b0:	40020058 	.word	0x40020058
 80026b4:	4002006c 	.word	0x4002006c
 80026b8:	40020408 	.word	0x40020408
 80026bc:	4002041c 	.word	0x4002041c
 80026c0:	40020430 	.word	0x40020430
 80026c4:	40020444 	.word	0x40020444
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2202      	movs	r2, #2
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80dd 	beq.w	800289c <HAL_DMA_IRQHandler+0x3d8>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80d7 	beq.w	800289c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020a 	bic.w	r2, r2, #10
 800270a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <HAL_DMA_IRQHandler+0x444>)
 800271c:	429a      	cmp	r2, r3
 800271e:	d958      	bls.n	80027d2 <HAL_DMA_IRQHandler+0x30e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a79      	ldr	r2, [pc, #484]	; (800290c <HAL_DMA_IRQHandler+0x448>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d04f      	beq.n	80027ca <HAL_DMA_IRQHandler+0x306>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_DMA_IRQHandler+0x44c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d048      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x302>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a76      	ldr	r2, [pc, #472]	; (8002914 <HAL_DMA_IRQHandler+0x450>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d040      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2fc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a75      	ldr	r2, [pc, #468]	; (8002918 <HAL_DMA_IRQHandler+0x454>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d038      	beq.n	80027ba <HAL_DMA_IRQHandler+0x2f6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a73      	ldr	r2, [pc, #460]	; (800291c <HAL_DMA_IRQHandler+0x458>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d030      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x2f0>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a72      	ldr	r2, [pc, #456]	; (8002920 <HAL_DMA_IRQHandler+0x45c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d028      	beq.n	80027ae <HAL_DMA_IRQHandler+0x2ea>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a69      	ldr	r2, [pc, #420]	; (8002908 <HAL_DMA_IRQHandler+0x444>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d020      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x2e4>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	; (8002924 <HAL_DMA_IRQHandler+0x460>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d019      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x2e0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <HAL_DMA_IRQHandler+0x464>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d012      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x2dc>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6b      	ldr	r2, [pc, #428]	; (800292c <HAL_DMA_IRQHandler+0x468>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00a      	beq.n	800279a <HAL_DMA_IRQHandler+0x2d6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_DMA_IRQHandler+0x46c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d102      	bne.n	8002794 <HAL_DMA_IRQHandler+0x2d0>
 800278e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002792:	e01b      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	e018      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 800279a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800279e:	e015      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027a0:	2320      	movs	r3, #32
 80027a2:	e013      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e011      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ac:	e00e      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027b2:	e00b      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b8:	e008      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027be:	e005      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c4:	e002      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027c6:	2320      	movs	r3, #32
 80027c8:	e000      	b.n	80027cc <HAL_DMA_IRQHandler+0x308>
 80027ca:	2302      	movs	r3, #2
 80027cc:	4a59      	ldr	r2, [pc, #356]	; (8002934 <HAL_DMA_IRQHandler+0x470>)
 80027ce:	6053      	str	r3, [r2, #4]
 80027d0:	e057      	b.n	8002882 <HAL_DMA_IRQHandler+0x3be>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a4d      	ldr	r2, [pc, #308]	; (800290c <HAL_DMA_IRQHandler+0x448>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04f      	beq.n	800287c <HAL_DMA_IRQHandler+0x3b8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_DMA_IRQHandler+0x44c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d048      	beq.n	8002878 <HAL_DMA_IRQHandler+0x3b4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a4a      	ldr	r2, [pc, #296]	; (8002914 <HAL_DMA_IRQHandler+0x450>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_IRQHandler+0x3ae>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <HAL_DMA_IRQHandler+0x454>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d038      	beq.n	800286c <HAL_DMA_IRQHandler+0x3a8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a47      	ldr	r2, [pc, #284]	; (800291c <HAL_DMA_IRQHandler+0x458>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d030      	beq.n	8002866 <HAL_DMA_IRQHandler+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a45      	ldr	r2, [pc, #276]	; (8002920 <HAL_DMA_IRQHandler+0x45c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d028      	beq.n	8002860 <HAL_DMA_IRQHandler+0x39c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <HAL_DMA_IRQHandler+0x444>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d020      	beq.n	800285a <HAL_DMA_IRQHandler+0x396>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a41      	ldr	r2, [pc, #260]	; (8002924 <HAL_DMA_IRQHandler+0x460>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_DMA_IRQHandler+0x392>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a40      	ldr	r2, [pc, #256]	; (8002928 <HAL_DMA_IRQHandler+0x464>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d012      	beq.n	8002852 <HAL_DMA_IRQHandler+0x38e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a3e      	ldr	r2, [pc, #248]	; (800292c <HAL_DMA_IRQHandler+0x468>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00a      	beq.n	800284c <HAL_DMA_IRQHandler+0x388>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <HAL_DMA_IRQHandler+0x46c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d102      	bne.n	8002846 <HAL_DMA_IRQHandler+0x382>
 8002840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002844:	e01b      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284a:	e018      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 800284c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002850:	e015      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002852:	2320      	movs	r3, #32
 8002854:	e013      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002856:	2302      	movs	r3, #2
 8002858:	e011      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 800285a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285e:	e00e      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002860:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002864:	e00b      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286a:	e008      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 800286c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002870:	e005      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002876:	e002      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 8002878:	2320      	movs	r3, #32
 800287a:	e000      	b.n	800287e <HAL_DMA_IRQHandler+0x3ba>
 800287c:	2302      	movs	r3, #2
 800287e:	4a2e      	ldr	r2, [pc, #184]	; (8002938 <HAL_DMA_IRQHandler+0x474>)
 8002880:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	d034      	beq.n	80028fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800289a:	e02f      	b.n	80028fc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	2208      	movs	r2, #8
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d028      	beq.n	80028fe <HAL_DMA_IRQHandler+0x43a>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d023      	beq.n	80028fe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 020e 	bic.w	r2, r2, #14
 80028c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
    }
  }
  return;
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
}
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40020080 	.word	0x40020080
 800290c:	40020008 	.word	0x40020008
 8002910:	4002001c 	.word	0x4002001c
 8002914:	40020030 	.word	0x40020030
 8002918:	40020044 	.word	0x40020044
 800291c:	40020058 	.word	0x40020058
 8002920:	4002006c 	.word	0x4002006c
 8002924:	40020408 	.word	0x40020408
 8002928:	4002041c 	.word	0x4002041c
 800292c:	40020430 	.word	0x40020430
 8002930:	40020444 	.word	0x40020444
 8002934:	40020400 	.word	0x40020400
 8002938:	40020000 	.word	0x40020000

0800293c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d108      	bne.n	800297c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800297a:	e007      	b.n	800298c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b08b      	sub	sp, #44	; 0x2c
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	e179      	b.n	8002ca0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029ac:	2201      	movs	r2, #1
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 8168 	bne.w	8002c9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a96      	ldr	r2, [pc, #600]	; (8002c28 <HAL_GPIO_Init+0x290>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d05e      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029d4:	4a94      	ldr	r2, [pc, #592]	; (8002c28 <HAL_GPIO_Init+0x290>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d875      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029da:	4a94      	ldr	r2, [pc, #592]	; (8002c2c <HAL_GPIO_Init+0x294>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d058      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029e0:	4a92      	ldr	r2, [pc, #584]	; (8002c2c <HAL_GPIO_Init+0x294>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d86f      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029e6:	4a92      	ldr	r2, [pc, #584]	; (8002c30 <HAL_GPIO_Init+0x298>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d052      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029ec:	4a90      	ldr	r2, [pc, #576]	; (8002c30 <HAL_GPIO_Init+0x298>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d869      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029f2:	4a90      	ldr	r2, [pc, #576]	; (8002c34 <HAL_GPIO_Init+0x29c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04c      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029f8:	4a8e      	ldr	r2, [pc, #568]	; (8002c34 <HAL_GPIO_Init+0x29c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d863      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029fe:	4a8e      	ldr	r2, [pc, #568]	; (8002c38 <HAL_GPIO_Init+0x2a0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d046      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 8002a04:	4a8c      	ldr	r2, [pc, #560]	; (8002c38 <HAL_GPIO_Init+0x2a0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d85d      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d82a      	bhi.n	8002a64 <HAL_GPIO_Init+0xcc>
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d859      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_GPIO_Init+0x80>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a93 	.word	0x08002a93
 8002a1c:	08002a6d 	.word	0x08002a6d
 8002a20:	08002a7f 	.word	0x08002a7f
 8002a24:	08002ac1 	.word	0x08002ac1
 8002a28:	08002ac7 	.word	0x08002ac7
 8002a2c:	08002ac7 	.word	0x08002ac7
 8002a30:	08002ac7 	.word	0x08002ac7
 8002a34:	08002ac7 	.word	0x08002ac7
 8002a38:	08002ac7 	.word	0x08002ac7
 8002a3c:	08002ac7 	.word	0x08002ac7
 8002a40:	08002ac7 	.word	0x08002ac7
 8002a44:	08002ac7 	.word	0x08002ac7
 8002a48:	08002ac7 	.word	0x08002ac7
 8002a4c:	08002ac7 	.word	0x08002ac7
 8002a50:	08002ac7 	.word	0x08002ac7
 8002a54:	08002ac7 	.word	0x08002ac7
 8002a58:	08002ac7 	.word	0x08002ac7
 8002a5c:	08002a75 	.word	0x08002a75
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	4a75      	ldr	r2, [pc, #468]	; (8002c3c <HAL_GPIO_Init+0x2a4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a6a:	e02c      	b.n	8002ac6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e029      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	623b      	str	r3, [r7, #32]
          break;
 8002a7c:	e024      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	3308      	adds	r3, #8
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e01f      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	623b      	str	r3, [r7, #32]
          break;
 8002a90:	e01a      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	623b      	str	r3, [r7, #32]
          break;
 8002a9e:	e013      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	611a      	str	r2, [r3, #16]
          break;
 8002ab2:	e009      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	615a      	str	r2, [r3, #20]
          break;
 8002abe:	e003      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          break;
 8002ac6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	d801      	bhi.n	8002ad2 <HAL_GPIO_Init+0x13a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	e001      	b.n	8002ad6 <HAL_GPIO_Init+0x13e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d802      	bhi.n	8002ae4 <HAL_GPIO_Init+0x14c>
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	e002      	b.n	8002aea <HAL_GPIO_Init+0x152>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	3b08      	subs	r3, #8
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	210f      	movs	r1, #15
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	431a      	orrs	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80c1 	beq.w	8002c9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b18:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_GPIO_Init+0x2a8>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <HAL_GPIO_Init+0x2a8>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_GPIO_Init+0x2a8>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b30:	4a44      	ldr	r2, [pc, #272]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3c      	ldr	r2, [pc, #240]	; (8002c48 <HAL_GPIO_Init+0x2b0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01f      	beq.n	8002b9c <HAL_GPIO_Init+0x204>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	; (8002c4c <HAL_GPIO_Init+0x2b4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d019      	beq.n	8002b98 <HAL_GPIO_Init+0x200>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3a      	ldr	r2, [pc, #232]	; (8002c50 <HAL_GPIO_Init+0x2b8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_GPIO_Init+0x1fc>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a39      	ldr	r2, [pc, #228]	; (8002c54 <HAL_GPIO_Init+0x2bc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00d      	beq.n	8002b90 <HAL_GPIO_Init+0x1f8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <HAL_GPIO_Init+0x1f4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	; (8002c5c <HAL_GPIO_Init+0x2c4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_GPIO_Init+0x1f0>
 8002b84:	2305      	movs	r3, #5
 8002b86:	e00a      	b.n	8002b9e <HAL_GPIO_Init+0x206>
 8002b88:	2306      	movs	r3, #6
 8002b8a:	e008      	b.n	8002b9e <HAL_GPIO_Init+0x206>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	e006      	b.n	8002b9e <HAL_GPIO_Init+0x206>
 8002b90:	2303      	movs	r3, #3
 8002b92:	e004      	b.n	8002b9e <HAL_GPIO_Init+0x206>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x206>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_GPIO_Init+0x206>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	f002 0203 	and.w	r2, r2, #3
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	4093      	lsls	r3, r2
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bae:	4925      	ldr	r1, [pc, #148]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4924      	ldr	r1, [pc, #144]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
 8002bd4:	e006      	b.n	8002be4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4920      	ldr	r1, [pc, #128]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	491a      	ldr	r1, [pc, #104]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4916      	ldr	r1, [pc, #88]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d025      	beq.n	8002c64 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4910      	ldr	r1, [pc, #64]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e025      	b.n	8002c72 <HAL_GPIO_Init+0x2da>
 8002c26:	bf00      	nop
 8002c28:	10320000 	.word	0x10320000
 8002c2c:	10310000 	.word	0x10310000
 8002c30:	10220000 	.word	0x10220000
 8002c34:	10210000 	.word	0x10210000
 8002c38:	10120000 	.word	0x10120000
 8002c3c:	10110000 	.word	0x10110000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40010800 	.word	0x40010800
 8002c4c:	40010c00 	.word	0x40010c00
 8002c50:	40011000 	.word	0x40011000
 8002c54:	40011400 	.word	0x40011400
 8002c58:	40011800 	.word	0x40011800
 8002c5c:	40011c00 	.word	0x40011c00
 8002c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	4913      	ldr	r1, [pc, #76]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
 8002c8a:	e006      	b.n	8002c9a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	4909      	ldr	r1, [pc, #36]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f47f ae7e 	bne.w	80029ac <HAL_GPIO_Init+0x14>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	372c      	adds	r7, #44	; 0x2c
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40010400 	.word	0x40010400

08002cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cdc:	e003      	b.n	8002ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	041a      	lsls	r2, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43d9      	mvns	r1, r3
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	400b      	ands	r3, r1
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e12b      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd fdb4 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d88:	f000 fcdc 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a81      	ldr	r2, [pc, #516]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d807      	bhi.n	8002da8 <HAL_I2C_Init+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_I2C_Init+0x278>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e006      	b.n	8002db6 <HAL_I2C_Init+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_I2C_Init+0x27c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e7      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	; (8002fa4 <HAL_I2C_Init+0x280>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <HAL_I2C_Init+0xd4>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	e009      	b.n	8002e0c <HAL_I2C_Init+0xe8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_I2C_Init+0x284>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d819      	bhi.n	8002e60 <HAL_I2C_Init+0x13c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e40:	400b      	ands	r3, r1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_I2C_Init+0x138>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e59      	subs	r1, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	e051      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e04f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <HAL_I2C_Init+0x168>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Init+0x18e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	0099      	lsls	r1, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x196>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_I2C_Init+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6911      	ldr	r1, [r2, #16]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	000186a0 	.word	0x000186a0
 8002f9c:	001e847f 	.word	0x001e847f
 8002fa0:	003d08ff 	.word	0x003d08ff
 8002fa4:	431bde83 	.word	0x431bde83
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e272      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8087 	beq.w	80030da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fcc:	4b92      	ldr	r3, [pc, #584]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d112      	bne.n	800300a <HAL_RCC_OscConfig+0x5e>
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d10b      	bne.n	800300a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff2:	4b89      	ldr	r3, [pc, #548]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d06c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x12c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d168      	bne.n	80030d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e24c      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x76>
 8003014:	4b80      	ldr	r3, [pc, #512]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a7f      	ldr	r2, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e02e      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7a      	ldr	r2, [pc, #488]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b78      	ldr	r3, [pc, #480]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a77      	ldr	r2, [pc, #476]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800303c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0xbc>
 800304e:	4b72      	ldr	r3, [pc, #456]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a71      	ldr	r2, [pc, #452]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003068:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6a      	ldr	r2, [pc, #424]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a67      	ldr	r2, [pc, #412]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fec6 	bl	8001e18 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe fec2 	bl	8001e18 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e200      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xe4>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe feb2 	bl	8001e18 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fe feae 	bl	8001e18 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1ec      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x10c>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d063      	beq.n	80031ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e6:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030f2:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11c      	bne.n	8003138 <HAL_RCC_OscConfig+0x18c>
 80030fe:	4b46      	ldr	r3, [pc, #280]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	4b43      	ldr	r3, [pc, #268]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x176>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e1c0      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4939      	ldr	r1, [pc, #228]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003136:	e03a      	b.n	80031ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fe67 	bl	8001e18 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314e:	f7fe fe63 	bl	8001e18 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1a1      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4927      	ldr	r1, [pc, #156]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe fe46 	bl	8001e18 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fe fe42 	bl	8001e18 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e180      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d03a      	beq.n	8003230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_RCC_OscConfig+0x274>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe fe26 	bl	8001e18 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fe fe22 	bl	8001e18 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e160      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031ee:	2001      	movs	r0, #1
 80031f0:	f000 fad0 	bl	8003794 <RCC_Delay>
 80031f4:	e01c      	b.n	8003230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_RCC_OscConfig+0x274>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fe fe0c 	bl	8001e18 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003202:	e00f      	b.n	8003224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fe fe08 	bl	8001e18 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d908      	bls.n	8003224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e146      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	42420000 	.word	0x42420000
 8003220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b92      	ldr	r3, [pc, #584]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e9      	bne.n	8003204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a6 	beq.w	800338a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b8b      	ldr	r3, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4a87      	ldr	r2, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	61d3      	str	r3, [r2, #28]
 800325a:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b7f      	ldr	r3, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7e      	ldr	r2, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe fdc9 	bl	8001e18 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fe fdc5 	bl	8001e18 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	; 0x64
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e103      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b75      	ldr	r3, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x312>
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	e02d      	b.n	800331a <HAL_RCC_OscConfig+0x36e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x334>
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a69      	ldr	r2, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	4b67      	ldr	r3, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a66      	ldr	r2, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	6213      	str	r3, [r2, #32]
 80032de:	e01c      	b.n	800331a <HAL_RCC_OscConfig+0x36e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d10c      	bne.n	8003302 <HAL_RCC_OscConfig+0x356>
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a60      	ldr	r2, [pc, #384]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6213      	str	r3, [r2, #32]
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x36e>
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a5a      	ldr	r2, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d015      	beq.n	800334e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fe fd79 	bl	8001e18 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe fd75 	bl	8001e18 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0b1      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ee      	beq.n	800332a <HAL_RCC_OscConfig+0x37e>
 800334c:	e014      	b.n	8003378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fe fd63 	bl	8001e18 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe fd5f 	bl	8001e18 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e09b      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ee      	bne.n	8003356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4a3b      	ldr	r2, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8087 	beq.w	80034a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d061      	beq.n	8003464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d146      	bne.n	8003436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fe fd33 	bl	8001e18 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fe fd2f 	bl	8001e18 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e06d      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d108      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4921      	ldr	r1, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a19      	ldr	r1, [r3, #32]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	430b      	orrs	r3, r1
 8003402:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe fd03 	bl	8001e18 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe fcff 	bl	8001e18 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e03d      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x46a>
 8003434:	e035      	b.n	80034a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe fcec 	bl	8001e18 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fce8 	bl	8001e18 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e026      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x498>
 8003462:	e01e      	b.n	80034a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e019      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
 8003470:	40021000 	.word	0x40021000
 8003474:	40007000 	.word	0x40007000
 8003478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_OscConfig+0x500>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	429a      	cmp	r2, r3
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000

080034b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0d0      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 0207 	bic.w	r2, r3, #7
 80034da:	4965      	ldr	r1, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800352e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d040      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e073      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06b      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4936      	ldr	r1, [pc, #216]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fe fc3a 	bl	8001e18 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe fc36 	bl	8001e18 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e053      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d210      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	4922      	ldr	r1, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1cc>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1d0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fb98 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40022000 	.word	0x40022000
 8003674:	40021000 	.word	0x40021000
 8003678:	08005a64 	.word	0x08005a64
 800367c:	20000004 	.word	0x20000004
 8003680:	2000000c 	.word	0x2000000c

08003684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_RCC_GetSysClockFreq+0x94>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x30>
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x36>
 80036b2:	e027      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_GetSysClockFreq+0x98>)
 80036b6:	613b      	str	r3, [r7, #16]
      break;
 80036b8:	e027      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0c9b      	lsrs	r3, r3, #18
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_GetSysClockFreq+0x94>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0c5b      	lsrs	r3, r3, #17
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_RCC_GetSysClockFreq+0x98>)
 80036e6:	fb03 f202 	mul.w	r2, r3, r2
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e004      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	613b      	str	r3, [r7, #16]
      break;
 8003702:	e002      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003706:	613b      	str	r3, [r7, #16]
      break;
 8003708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370a:	693b      	ldr	r3, [r7, #16]
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	00f42400 	.word	0x00f42400
 8003720:	08005a7c 	.word	0x08005a7c
 8003724:	08005a8c 	.word	0x08005a8c
 8003728:	003d0900 	.word	0x003d0900
 800372c:	007a1200 	.word	0x007a1200

08003730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b02      	ldr	r3, [pc, #8]	; (8003740 <HAL_RCC_GetHCLKFreq+0x10>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003748:	f7ff fff2 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	08005a74 	.word	0x08005a74

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003770:	f7ff ffde 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0adb      	lsrs	r3, r3, #11
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	08005a74 	.word	0x08005a74

08003794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <RCC_Delay+0x34>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <RCC_Delay+0x38>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a5b      	lsrs	r3, r3, #9
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b0:	bf00      	nop
  }
  while (Delay --);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <RCC_Delay+0x1c>
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20000004 	.word	0x20000004
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e076      	b.n	80038d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f2:	d009      	beq.n	8003808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
 80037fa:	e005      	b.n	8003808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fe1a 	bl	800145c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	ea42 0103 	orr.w	r1, r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	0c1a      	lsrs	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f002 0204 	and.w	r2, r2, #4
 80038ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Transmit+0x22>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e12d      	b.n	8003b56 <HAL_SPI_Transmit+0x27e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003902:	f7fe fa89 	bl	8001e18 <HAL_GetTick>
 8003906:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003918:	2302      	movs	r3, #2
 800391a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800391c:	e116      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_Transmit+0x52>
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800392e:	e10d      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d10f      	bne.n	8003998 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003996:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d007      	beq.n	80039b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039be:	d14f      	bne.n	8003a60 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Transmit+0xf6>
 80039c8:	8afb      	ldrh	r3, [r7, #22]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d142      	bne.n	8003a54 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f2:	e02f      	b.n	8003a54 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d112      	bne.n	8003a28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a26:	e015      	b.n	8003a54 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a28:	f7fe f9f6 	bl	8001e18 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d803      	bhi.n	8003a40 <HAL_SPI_Transmit+0x168>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Transmit+0x16e>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003a52:	e07b      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ca      	bne.n	80039f4 <HAL_SPI_Transmit+0x11c>
 8003a5e:	e050      	b.n	8003b02 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Transmit+0x196>
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d144      	bne.n	8003af8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a94:	e030      	b.n	8003af8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d113      	bne.n	8003acc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aca:	e015      	b.n	8003af8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003acc:	f7fe f9a4 	bl	8001e18 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d803      	bhi.n	8003ae4 <HAL_SPI_Transmit+0x20c>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d102      	bne.n	8003aea <HAL_SPI_Transmit+0x212>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003af6:	e029      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1c9      	bne.n	8003a96 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa62 	bl	8003fd0 <SPI_EndRxTxTransaction>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e003      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08c      	sub	sp, #48	; 0x30
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x26>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e198      	b.n	8003eb6 <HAL_SPI_TransmitReceive+0x358>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b8c:	f7fe f944 	bl	8001e18 <HAL_GetTick>
 8003b90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d00f      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x70>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb4:	d107      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x68>
 8003bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d003      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bcc:	e16d      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x82>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x82>
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003be6:	e160      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d003      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	887a      	ldrh	r2, [r7, #2]
 8003c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	887a      	ldrh	r2, [r7, #2]
 8003c1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d007      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d17c      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x10a>
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d16a      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8c:	e057      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x176>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x176>
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d113      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d119      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x1b8>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d014      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d12:	2301      	movs	r3, #1
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d16:	f7fe f87f 	bl	8001e18 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d80b      	bhi.n	8003d3e <HAL_SPI_TransmitReceive+0x1e0>
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d007      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003d3c:	e0b5      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1a2      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x130>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d19d      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x130>
 8003d52:	e080      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x204>
 8003d5c:	8b7b      	ldrh	r3, [r7, #26]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d16f      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d88:	e05b      	b.n	8003e42 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11c      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x274>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x274>
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d114      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d119      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x2b6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d014      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e10:	2301      	movs	r3, #1
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e14:	f7fe f800 	bl	8001e18 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d803      	bhi.n	8003e2c <HAL_SPI_TransmitReceive+0x2ce>
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x2d4>
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003e40:	e033      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d19e      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x22c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d199      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f8b8 	bl	8003fd0 <SPI_EndRxTxTransaction>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e72:	e01a      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea0:	e003      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3730      	adds	r7, #48	; 0x30
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ed0:	f7fd ffa2 	bl	8001e18 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ee0:	f7fd ff9a 	bl	8001e18 <HAL_GetTick>
 8003ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	015b      	lsls	r3, r3, #5
 8003eec:	0d1b      	lsrs	r3, r3, #20
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ef6:	e054      	b.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d050      	beq.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f00:	f7fd ff8a 	bl	8001e18 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d902      	bls.n	8003f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d13d      	bne.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2e:	d111      	bne.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f38:	d004      	beq.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d107      	bne.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5c:	d10f      	bne.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e017      	b.n	8003fc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d19b      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000004 	.word	0x20000004

08003fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff ff6a 	bl	8003ec0 <SPI_WaitFlagStateUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f043 0220 	orr.w	r2, r3, #32
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e000      	b.n	8004004 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e041      	b.n	80040a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fc56 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fa82 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d001      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e044      	b.n	800414e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_TIM_Base_Start_IT+0xac>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x6c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	; (800415c <HAL_TIM_Base_Start_IT+0xb0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x6c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d00e      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x6c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIM_Base_Start_IT+0xb4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x6c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIM_Base_Start_IT+0xb8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x6c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_TIM_Base_Start_IT+0xbc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d111      	bne.n	800413c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b06      	cmp	r3, #6
 8004128:	d010      	beq.n	800414c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413a:	e007      	b.n	800414c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40013400 	.word	0x40013400
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00

0800416c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0202 	mvn.w	r2, #2
 8004198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f9b4 	bl	800451c <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9a7 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f9b6 	bl	800452e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0204 	mvn.w	r2, #4
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f98a 	bl	800451c <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f97d 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f98c 	bl	800452e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b08      	cmp	r3, #8
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b08      	cmp	r3, #8
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0208 	mvn.w	r2, #8
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2204      	movs	r2, #4
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f960 	bl	800451c <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f953 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f962 	bl	800452e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b10      	cmp	r3, #16
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0210 	mvn.w	r2, #16
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2208      	movs	r2, #8
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f936 	bl	800451c <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f929 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f938 	bl	800452e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10e      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d107      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0201 	mvn.w	r2, #1
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd fb82 	bl	80019f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d10e      	bne.n	800431c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	2b80      	cmp	r3, #128	; 0x80
 800430a:	d107      	bne.n	800431c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 faa1 	bl	800485e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d10e      	bne.n	8004348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d107      	bne.n	8004348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8fc 	bl	8004540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	d10e      	bne.n	8004374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b20      	cmp	r3, #32
 8004362:	d107      	bne.n	8004374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0220 	mvn.w	r2, #32
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa6c 	bl	800484c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIM_ConfigClockSource+0x1c>
 8004394:	2302      	movs	r3, #2
 8004396:	e0b4      	b.n	8004502 <HAL_TIM_ConfigClockSource+0x186>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d03e      	beq.n	8004450 <HAL_TIM_ConfigClockSource+0xd4>
 80043d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d6:	f200 8087 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	f000 8086 	beq.w	80044ee <HAL_TIM_ConfigClockSource+0x172>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	d87f      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b70      	cmp	r3, #112	; 0x70
 80043ea:	d01a      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0xa6>
 80043ec:	2b70      	cmp	r3, #112	; 0x70
 80043ee:	d87b      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b60      	cmp	r3, #96	; 0x60
 80043f2:	d050      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x11a>
 80043f4:	2b60      	cmp	r3, #96	; 0x60
 80043f6:	d877      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b50      	cmp	r3, #80	; 0x50
 80043fa:	d03c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0xfa>
 80043fc:	2b50      	cmp	r3, #80	; 0x50
 80043fe:	d873      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d058      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d86f      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b30      	cmp	r3, #48	; 0x30
 800440a:	d064      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x15a>
 800440c:	2b30      	cmp	r3, #48	; 0x30
 800440e:	d86b      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b20      	cmp	r3, #32
 8004412:	d060      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d867      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05c      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x15a>
 800441c:	2b10      	cmp	r3, #16
 800441e:	d05a      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004420:	e062      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	f000 f980 	bl	8004736 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	609a      	str	r2, [r3, #8]
      break;
 800444e:	e04f      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004460:	f000 f969 	bl	8004736 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004472:	609a      	str	r2, [r3, #8]
      break;
 8004474:	e03c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	461a      	mov	r2, r3
 8004484:	f000 f8e0 	bl	8004648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2150      	movs	r1, #80	; 0x50
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f937 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 8004494:	e02c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a2:	461a      	mov	r2, r3
 80044a4:	f000 f8fe 	bl	80046a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2160      	movs	r1, #96	; 0x60
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f927 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80044b4:	e01c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 f8c0 	bl	8004648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2140      	movs	r1, #64	; 0x40
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f917 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80044d4:	e00c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f000 f90e 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80044e6:	e003      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	e000      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
	...

08004554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a33      	ldr	r2, [pc, #204]	; (8004634 <TIM_Base_SetConfig+0xe0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a32      	ldr	r2, [pc, #200]	; (8004638 <TIM_Base_SetConfig+0xe4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00f      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <TIM_Base_SetConfig+0xe8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <TIM_Base_SetConfig+0xec>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <TIM_Base_SetConfig+0xf0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a22      	ldr	r2, [pc, #136]	; (8004634 <TIM_Base_SetConfig+0xe0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0x82>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <TIM_Base_SetConfig+0xe4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0x82>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0x82>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <TIM_Base_SetConfig+0xe8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0x82>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <TIM_Base_SetConfig+0xec>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <TIM_Base_SetConfig+0xf0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <TIM_Base_SetConfig+0xe0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_Base_SetConfig+0xc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <TIM_Base_SetConfig+0xe4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	615a      	str	r2, [r3, #20]
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00

08004648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f023 030a 	bic.w	r3, r3, #10
 8004684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f023 0210 	bic.w	r2, r3, #16
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	031b      	lsls	r3, r3, #12
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	621a      	str	r2, [r3, #32]
}
 80046f8:	bf00      	nop
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004736:	b480      	push	{r7}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004750:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	431a      	orrs	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	609a      	str	r2, [r3, #8]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e050      	b.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d00e      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a14      	ldr	r2, [pc, #80]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00

0800484c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e042      	b.n	8004908 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd f92e 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 ff2f 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d156      	bne.n	80049d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Transmit_DMA+0x26>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e04f      	b.n	80049da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2221      	movs	r2, #33	; 0x21
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4a21      	ldr	r2, [pc, #132]	; (80049e4 <HAL_UART_Transmit_DMA+0xd4>)
 8004960:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <HAL_UART_Transmit_DMA+0xd8>)
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_UART_Transmit_DMA+0xdc>)
 8004970:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	2200      	movs	r2, #0
 8004978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800497a:	f107 0308 	add.w	r3, r7, #8
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3304      	adds	r3, #4
 800498e:	461a      	mov	r2, r3
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	f7fd fbf3 	bl	800217c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800499e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	617b      	str	r3, [r7, #20]
   return(result);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3314      	adds	r3, #20
 80049be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049c0:	627a      	str	r2, [r7, #36]	; 0x24
 80049c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6a39      	ldr	r1, [r7, #32]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3730      	adds	r7, #48	; 0x30
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	08004fad 	.word	0x08004fad
 80049e8:	08005047 	.word	0x08005047
 80049ec:	080051cb 	.word	0x080051cb

080049f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d112      	bne.n	8004a30 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_Receive_DMA+0x26>
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00b      	b.n	8004a32 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	461a      	mov	r2, r3
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fc1a 	bl	8005260 <UART_Start_Receive_DMA>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e000      	b.n	8004a32 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b0ba      	sub	sp, #232	; 0xe8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x66>
 8004a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fd7e 	bl	800559c <UART_Receive_IT>
      return;
 8004aa0:	e25b      	b.n	8004f5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80de 	beq.w	8004c68 <HAL_UART_IRQHandler+0x22c>
 8004aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004abc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80d1 	beq.w	8004c68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_UART_IRQHandler+0xae>
 8004ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f043 0201 	orr.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_UART_IRQHandler+0xd2>
 8004af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f043 0202 	orr.w	r2, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xf6>
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_UART_IRQHandler+0x126>
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d105      	bne.n	8004b56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f043 0208 	orr.w	r2, r3, #8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 81f2 	beq.w	8004f50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_UART_IRQHandler+0x14e>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fd09 	bl	800559c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x17a>
 8004bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04f      	beq.n	8004c56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fc13 	bl	80053e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d041      	beq.n	8004c4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3314      	adds	r3, #20
 8004bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1d9      	bne.n	8004bca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d013      	beq.n	8004c46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	4a7e      	ldr	r2, [pc, #504]	; (8004e1c <HAL_UART_IRQHandler+0x3e0>)
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fb42 	bl	80022b4 <HAL_DMA_Abort_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e00e      	b.n	8004c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f99c 	bl	8004f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00a      	b.n	8004c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f998 	bl	8004f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e006      	b.n	8004c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f994 	bl	8004f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c62:	e175      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	bf00      	nop
    return;
 8004c66:	e173      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	f040 814f 	bne.w	8004f10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8148 	beq.w	8004f10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8141 	beq.w	8004f10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80b6 	beq.w	8004e20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8145 	beq.w	8004f54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f080 813e 	bcs.w	8004f54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	f000 8088 	beq.w	8004dfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1d9      	bne.n	8004cec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3314      	adds	r3, #20
 8004d58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e1      	bne.n	8004d38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3314      	adds	r3, #20
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3314      	adds	r3, #20
 8004d94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e3      	bne.n	8004d74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	f023 0310 	bic.w	r3, r3, #16
 8004dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dde:	65ba      	str	r2, [r7, #88]	; 0x58
 8004de0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e3      	bne.n	8004dba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd fa20 	bl	800223c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8bf 	bl	8004f96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e18:	e09c      	b.n	8004f54 <HAL_UART_IRQHandler+0x518>
 8004e1a:	bf00      	nop
 8004e1c:	080054a7 	.word	0x080054a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 808e 	beq.w	8004f58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8089 	beq.w	8004f58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e3      	bne.n	8004e46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3314      	adds	r3, #20
 8004e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ea2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e3      	bne.n	8004e7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0310 	bic.w	r3, r3, #16
 8004eda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e3      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f844 	bl	8004f96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f0e:	e023      	b.n	8004f58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_UART_IRQHandler+0x4f4>
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fad0 	bl	80054ce <UART_Transmit_IT>
    return;
 8004f2e:	e014      	b.n	8004f5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <HAL_UART_IRQHandler+0x51e>
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fb0f 	bl	800556c <UART_EndTransmit_IT>
    return;
 8004f4e:	e004      	b.n	8004f5a <HAL_UART_IRQHandler+0x51e>
    return;
 8004f50:	bf00      	nop
 8004f52:	e002      	b.n	8004f5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f54:	bf00      	nop
 8004f56:	e000      	b.n	8004f5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f58:	bf00      	nop
  }
}
 8004f5a:	37e8      	adds	r7, #232	; 0xe8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b090      	sub	sp, #64	; 0x40
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d137      	bne.n	8005038 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	2200      	movs	r2, #0
 8004fcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3314      	adds	r3, #20
 8004fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fee:	633a      	str	r2, [r7, #48]	; 0x30
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	60fb      	str	r3, [r7, #12]
   return(result);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	69b9      	ldr	r1, [r7, #24]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	617b      	str	r3, [r7, #20]
   return(result);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005036:	e002      	b.n	800503e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005038:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800503a:	f7fc fe5b 	bl	8001cf4 <HAL_UART_TxCpltCallback>
}
 800503e:	bf00      	nop
 8005040:	3740      	adds	r7, #64	; 0x40
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff ff83 	bl	8004f60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b09c      	sub	sp, #112	; 0x70
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d172      	bne.n	8005164 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005080:	2200      	movs	r2, #0
 8005082:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509a:	66bb      	str	r3, [r7, #104]	; 0x68
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80050a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	667b      	str	r3, [r7, #100]	; 0x64
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050d8:	647a      	str	r2, [r7, #68]	; 0x44
 80050da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	623b      	str	r3, [r7, #32]
   return(result);
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005102:	663b      	str	r3, [r7, #96]	; 0x60
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800510c:	633a      	str	r2, [r7, #48]	; 0x30
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	2b01      	cmp	r3, #1
 800512e:	d119      	bne.n	8005164 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005166:	2200      	movs	r2, #0
 8005168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	2b01      	cmp	r3, #1
 8005170:	d106      	bne.n	8005180 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005176:	4619      	mov	r1, r3
 8005178:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800517a:	f7ff ff0c 	bl	8004f96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800517e:	e002      	b.n	8005186 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005180:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005182:	f7fc fda9 	bl	8001cd8 <HAL_UART_RxCpltCallback>
}
 8005186:	bf00      	nop
 8005188:	3770      	adds	r7, #112	; 0x70
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d108      	bne.n	80051bc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4619      	mov	r1, r3
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff feee 	bl	8004f96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051ba:	e002      	b.n	80051c2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fed8 	bl	8004f72 <HAL_UART_RxHalfCpltCallback>
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b21      	cmp	r3, #33	; 0x21
 80051fc:	d108      	bne.n	8005210 <UART_DMAError+0x46>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2200      	movs	r2, #0
 8005208:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800520a:	68b8      	ldr	r0, [r7, #8]
 800520c:	f000 f8c2 	bl	8005394 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b22      	cmp	r3, #34	; 0x22
 8005230:	d108      	bne.n	8005244 <UART_DMAError+0x7a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800523e:	68b8      	ldr	r0, [r7, #8]
 8005240:	f000 f8cf 	bl	80053e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f043 0210 	orr.w	r2, r3, #16
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005250:	68b8      	ldr	r0, [r7, #8]
 8005252:	f7ff fe97 	bl	8004f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b098      	sub	sp, #96	; 0x60
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2222      	movs	r2, #34	; 0x22
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	4a3e      	ldr	r2, [pc, #248]	; (8005388 <UART_Start_Receive_DMA+0x128>)
 800528e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	4a3d      	ldr	r2, [pc, #244]	; (800538c <UART_Start_Receive_DMA+0x12c>)
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	4a3c      	ldr	r2, [pc, #240]	; (8005390 <UART_Start_Receive_DMA+0x130>)
 800529e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	2200      	movs	r2, #0
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	f7fc ff5c 	bl	800217c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d019      	beq.n	8005316 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005302:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	657b      	str	r3, [r7, #84]	; 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005336:	63ba      	str	r2, [r7, #56]	; 0x38
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800533c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3314      	adds	r3, #20
 8005350:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	617b      	str	r3, [r7, #20]
   return(result);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005360:	653b      	str	r3, [r7, #80]	; 0x50
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800536a:	627a      	str	r2, [r7, #36]	; 0x24
 800536c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6a39      	ldr	r1, [r7, #32]
 8005370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	61fb      	str	r3, [r7, #28]
   return(result);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3760      	adds	r7, #96	; 0x60
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08005063 	.word	0x08005063
 800538c:	0800518f 	.word	0x0800518f
 8005390:	080051cb 	.word	0x080051cb

08005394 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b089      	sub	sp, #36	; 0x24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80053d8:	bf00      	nop
 80053da:	3724      	adds	r7, #36	; 0x24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b095      	sub	sp, #84	; 0x54
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800540a:	643a      	str	r2, [r7, #64]	; 0x40
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	61fb      	str	r3, [r7, #28]
   return(result);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	64bb      	str	r3, [r7, #72]	; 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800543e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	2b01      	cmp	r3, #1
 8005458:	d119      	bne.n	800548e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60bb      	str	r3, [r7, #8]
   return(result);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 0310 	bic.w	r3, r3, #16
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800547a:	61ba      	str	r2, [r7, #24]
 800547c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	613b      	str	r3, [r7, #16]
   return(result);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800549c:	bf00      	nop
 800549e:	3754      	adds	r7, #84	; 0x54
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff fd5f 	bl	8004f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b21      	cmp	r3, #33	; 0x21
 80054e0:	d13e      	bne.n	8005560 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d114      	bne.n	8005516 <UART_Transmit_IT+0x48>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d110      	bne.n	8005516 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005508:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	1c9a      	adds	r2, r3, #2
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	621a      	str	r2, [r3, #32]
 8005514:	e008      	b.n	8005528 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6211      	str	r1, [r2, #32]
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4619      	mov	r1, r3
 8005536:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10f      	bne.n	800555c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800554a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800555a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005582:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fc fbb1 	bl	8001cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b22      	cmp	r3, #34	; 0x22
 80055ae:	f040 80ae 	bne.w	800570e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	d117      	bne.n	80055ec <UART_Receive_IT+0x50>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	1c9a      	adds	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
 80055ea:	e026      	b.n	800563a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	d007      	beq.n	8005610 <UART_Receive_IT+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <UART_Receive_IT+0x82>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e008      	b.n	8005630 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562a:	b2da      	uxtb	r2, r3
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29b      	uxth	r3, r3
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4619      	mov	r1, r3
 8005648:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800564a:	2b00      	cmp	r3, #0
 800564c:	d15d      	bne.n	800570a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0220 	bic.w	r2, r2, #32
 800565c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800566c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0201 	bic.w	r2, r2, #1
 800567c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	2b01      	cmp	r3, #1
 8005692:	d135      	bne.n	8005700 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	613b      	str	r3, [r7, #16]
   return(result);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ba:	623a      	str	r2, [r7, #32]
 80056bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	69f9      	ldr	r1, [r7, #28]
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d10a      	bne.n	80056f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fc4c 	bl	8004f96 <HAL_UARTEx_RxEventCallback>
 80056fe:	e002      	b.n	8005706 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fc fae9 	bl	8001cd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e002      	b.n	8005710 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e000      	b.n	8005710 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
  }
}
 8005710:	4618      	mov	r0, r3
 8005712:	3730      	adds	r7, #48	; 0x30
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005752:	f023 030c 	bic.w	r3, r3, #12
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	430b      	orrs	r3, r1
 800575e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <UART_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fd fff4 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	e002      	b.n	800578e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fd ffdc 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 800578c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	4a22      	ldr	r2, [pc, #136]	; (8005830 <UART_SetConfig+0x118>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	0119      	lsls	r1, r3, #4
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009a      	lsls	r2, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <UART_SetConfig+0x118>)
 80057c6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2064      	movs	r0, #100	; 0x64
 80057ce:	fb00 f303 	mul.w	r3, r0, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	3332      	adds	r3, #50	; 0x32
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <UART_SetConfig+0x118>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e4:	4419      	add	r1, r3
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009a      	lsls	r2, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <UART_SetConfig+0x118>)
 80057fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2064      	movs	r0, #100	; 0x64
 8005806:	fb00 f303 	mul.w	r3, r0, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	3332      	adds	r3, #50	; 0x32
 8005810:	4a07      	ldr	r2, [pc, #28]	; (8005830 <UART_SetConfig+0x118>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	440a      	add	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40013800 	.word	0x40013800
 8005830:	51eb851f 	.word	0x51eb851f

08005834 <malloc>:
 8005834:	4b02      	ldr	r3, [pc, #8]	; (8005840 <malloc+0xc>)
 8005836:	4601      	mov	r1, r0
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f000 b823 	b.w	8005884 <_malloc_r>
 800583e:	bf00      	nop
 8005840:	20000060 	.word	0x20000060

08005844 <sbrk_aligned>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4e0e      	ldr	r6, [pc, #56]	; (8005880 <sbrk_aligned+0x3c>)
 8005848:	460c      	mov	r4, r1
 800584a:	6831      	ldr	r1, [r6, #0]
 800584c:	4605      	mov	r5, r0
 800584e:	b911      	cbnz	r1, 8005856 <sbrk_aligned+0x12>
 8005850:	f000 f8ac 	bl	80059ac <_sbrk_r>
 8005854:	6030      	str	r0, [r6, #0]
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f000 f8a7 	bl	80059ac <_sbrk_r>
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d00a      	beq.n	8005878 <sbrk_aligned+0x34>
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d007      	beq.n	800587c <sbrk_aligned+0x38>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4628      	mov	r0, r5
 8005870:	f000 f89c 	bl	80059ac <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d101      	bne.n	800587c <sbrk_aligned+0x38>
 8005878:	f04f 34ff 	mov.w	r4, #4294967295
 800587c:	4620      	mov	r0, r4
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	20000360 	.word	0x20000360

08005884 <_malloc_r>:
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005888:	1ccd      	adds	r5, r1, #3
 800588a:	f025 0503 	bic.w	r5, r5, #3
 800588e:	3508      	adds	r5, #8
 8005890:	2d0c      	cmp	r5, #12
 8005892:	bf38      	it	cc
 8005894:	250c      	movcc	r5, #12
 8005896:	2d00      	cmp	r5, #0
 8005898:	4607      	mov	r7, r0
 800589a:	db01      	blt.n	80058a0 <_malloc_r+0x1c>
 800589c:	42a9      	cmp	r1, r5
 800589e:	d905      	bls.n	80058ac <_malloc_r+0x28>
 80058a0:	230c      	movs	r3, #12
 80058a2:	2600      	movs	r6, #0
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4630      	mov	r0, r6
 80058a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005980 <_malloc_r+0xfc>
 80058b0:	f000 f868 	bl	8005984 <__malloc_lock>
 80058b4:	f8d8 3000 	ldr.w	r3, [r8]
 80058b8:	461c      	mov	r4, r3
 80058ba:	bb5c      	cbnz	r4, 8005914 <_malloc_r+0x90>
 80058bc:	4629      	mov	r1, r5
 80058be:	4638      	mov	r0, r7
 80058c0:	f7ff ffc0 	bl	8005844 <sbrk_aligned>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	d155      	bne.n	8005976 <_malloc_r+0xf2>
 80058ca:	f8d8 4000 	ldr.w	r4, [r8]
 80058ce:	4626      	mov	r6, r4
 80058d0:	2e00      	cmp	r6, #0
 80058d2:	d145      	bne.n	8005960 <_malloc_r+0xdc>
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	d048      	beq.n	800596a <_malloc_r+0xe6>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	4631      	mov	r1, r6
 80058dc:	4638      	mov	r0, r7
 80058de:	eb04 0903 	add.w	r9, r4, r3
 80058e2:	f000 f863 	bl	80059ac <_sbrk_r>
 80058e6:	4581      	cmp	r9, r0
 80058e8:	d13f      	bne.n	800596a <_malloc_r+0xe6>
 80058ea:	6821      	ldr	r1, [r4, #0]
 80058ec:	4638      	mov	r0, r7
 80058ee:	1a6d      	subs	r5, r5, r1
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7ff ffa7 	bl	8005844 <sbrk_aligned>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d037      	beq.n	800596a <_malloc_r+0xe6>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	442b      	add	r3, r5
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	f8d8 3000 	ldr.w	r3, [r8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d038      	beq.n	800597a <_malloc_r+0xf6>
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	42a2      	cmp	r2, r4
 800590c:	d12b      	bne.n	8005966 <_malloc_r+0xe2>
 800590e:	2200      	movs	r2, #0
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	e00f      	b.n	8005934 <_malloc_r+0xb0>
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	1b52      	subs	r2, r2, r5
 8005918:	d41f      	bmi.n	800595a <_malloc_r+0xd6>
 800591a:	2a0b      	cmp	r2, #11
 800591c:	d917      	bls.n	800594e <_malloc_r+0xca>
 800591e:	1961      	adds	r1, r4, r5
 8005920:	42a3      	cmp	r3, r4
 8005922:	6025      	str	r5, [r4, #0]
 8005924:	bf18      	it	ne
 8005926:	6059      	strne	r1, [r3, #4]
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	bf08      	it	eq
 800592c:	f8c8 1000 	streq.w	r1, [r8]
 8005930:	5162      	str	r2, [r4, r5]
 8005932:	604b      	str	r3, [r1, #4]
 8005934:	4638      	mov	r0, r7
 8005936:	f104 060b 	add.w	r6, r4, #11
 800593a:	f000 f829 	bl	8005990 <__malloc_unlock>
 800593e:	f026 0607 	bic.w	r6, r6, #7
 8005942:	1d23      	adds	r3, r4, #4
 8005944:	1af2      	subs	r2, r6, r3
 8005946:	d0ae      	beq.n	80058a6 <_malloc_r+0x22>
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	50a3      	str	r3, [r4, r2]
 800594c:	e7ab      	b.n	80058a6 <_malloc_r+0x22>
 800594e:	42a3      	cmp	r3, r4
 8005950:	6862      	ldr	r2, [r4, #4]
 8005952:	d1dd      	bne.n	8005910 <_malloc_r+0x8c>
 8005954:	f8c8 2000 	str.w	r2, [r8]
 8005958:	e7ec      	b.n	8005934 <_malloc_r+0xb0>
 800595a:	4623      	mov	r3, r4
 800595c:	6864      	ldr	r4, [r4, #4]
 800595e:	e7ac      	b.n	80058ba <_malloc_r+0x36>
 8005960:	4634      	mov	r4, r6
 8005962:	6876      	ldr	r6, [r6, #4]
 8005964:	e7b4      	b.n	80058d0 <_malloc_r+0x4c>
 8005966:	4613      	mov	r3, r2
 8005968:	e7cc      	b.n	8005904 <_malloc_r+0x80>
 800596a:	230c      	movs	r3, #12
 800596c:	4638      	mov	r0, r7
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	f000 f80e 	bl	8005990 <__malloc_unlock>
 8005974:	e797      	b.n	80058a6 <_malloc_r+0x22>
 8005976:	6025      	str	r5, [r4, #0]
 8005978:	e7dc      	b.n	8005934 <_malloc_r+0xb0>
 800597a:	605b      	str	r3, [r3, #4]
 800597c:	deff      	udf	#255	; 0xff
 800597e:	bf00      	nop
 8005980:	2000035c 	.word	0x2000035c

08005984 <__malloc_lock>:
 8005984:	4801      	ldr	r0, [pc, #4]	; (800598c <__malloc_lock+0x8>)
 8005986:	f000 b84b 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 800598a:	bf00      	nop
 800598c:	200004a0 	.word	0x200004a0

08005990 <__malloc_unlock>:
 8005990:	4801      	ldr	r0, [pc, #4]	; (8005998 <__malloc_unlock+0x8>)
 8005992:	f000 b846 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005996:	bf00      	nop
 8005998:	200004a0 	.word	0x200004a0

0800599c <memset>:
 800599c:	4603      	mov	r3, r0
 800599e:	4402      	add	r2, r0
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d100      	bne.n	80059a6 <memset+0xa>
 80059a4:	4770      	bx	lr
 80059a6:	f803 1b01 	strb.w	r1, [r3], #1
 80059aa:	e7f9      	b.n	80059a0 <memset+0x4>

080059ac <_sbrk_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	2300      	movs	r3, #0
 80059b0:	4d05      	ldr	r5, [pc, #20]	; (80059c8 <_sbrk_r+0x1c>)
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	f7fb febe 	bl	8001738 <_sbrk>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_sbrk_r+0x1a>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_sbrk_r+0x1a>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	2000049c 	.word	0x2000049c

080059cc <__errno>:
 80059cc:	4b01      	ldr	r3, [pc, #4]	; (80059d4 <__errno+0x8>)
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000060 	.word	0x20000060

080059d8 <__libc_init_array>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	2600      	movs	r6, #0
 80059dc:	4d0c      	ldr	r5, [pc, #48]	; (8005a10 <__libc_init_array+0x38>)
 80059de:	4c0d      	ldr	r4, [pc, #52]	; (8005a14 <__libc_init_array+0x3c>)
 80059e0:	1b64      	subs	r4, r4, r5
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	42a6      	cmp	r6, r4
 80059e6:	d109      	bne.n	80059fc <__libc_init_array+0x24>
 80059e8:	f000 f82a 	bl	8005a40 <_init>
 80059ec:	2600      	movs	r6, #0
 80059ee:	4d0a      	ldr	r5, [pc, #40]	; (8005a18 <__libc_init_array+0x40>)
 80059f0:	4c0a      	ldr	r4, [pc, #40]	; (8005a1c <__libc_init_array+0x44>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	42a6      	cmp	r6, r4
 80059f8:	d105      	bne.n	8005a06 <__libc_init_array+0x2e>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a00:	4798      	blx	r3
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7ee      	b.n	80059e4 <__libc_init_array+0xc>
 8005a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0a:	4798      	blx	r3
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	e7f2      	b.n	80059f6 <__libc_init_array+0x1e>
 8005a10:	08005a90 	.word	0x08005a90
 8005a14:	08005a90 	.word	0x08005a90
 8005a18:	08005a90 	.word	0x08005a90
 8005a1c:	08005a94 	.word	0x08005a94

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	4291      	cmp	r1, r2
 8005a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <_init>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr

08005a4c <_fini>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr
